using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel
{
    //the class for the maintenance of an airliner
    [Serializable]
    public class AirlinerMaintenance : ISerializable
    {
        [Versioning("checks")]
        public List<AirlinerMaintenanceCheck> Checks { get; set; }
         public AirlinerMaintenance(DateTime date)
        {
            this.Checks = new List<AirlinerMaintenanceCheck>();

             foreach (AirlinerMaintenanceType type in AirlinerMaintenanceTypes.GetMaintenanceTypes())
                this.Checks.Add(new AirlinerMaintenanceCheck(type,date));

        }
          private AirlinerMaintenance(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
         }
        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }
        //returns the last check for a specific type
        public DateTime getLastCheck(AirlinerMaintenanceType type)
        {
            var check = this.Checks.FirstOrDefault(c=>c.Type.Name == type.Name);

            if (check == null)
                return DateTime.MinValue;
            else
                return check.LastCheck;
          
        }
        public DateTime getNextCheck(AirlinerMaintenanceType type)
        {
            var check = this.Checks.First(c => c.Type.Name == type.Name);

            DateTime lastdate = check.LastCheck;

            return lastdate.AddDays(check.Interval);
        }
        //sets the last check of a specific type
        public void setLastCheck(AirlinerMaintenanceType type, DateTime lastcheck)
        {
            var check = this.Checks.FirstOrDefault(c => c.Type.Name == type.Name);

            if (check == null)
                this.Checks.Add(new AirlinerMaintenanceCheck(type, lastcheck));
            else
                check.LastCheck = lastcheck;
        }
        //returns the interval where the next check needs be performed of a specific type
        public Period<DateTime> getNextMaintenanceInterval(AirlinerMaintenanceType type)
        {
            var check = this.Checks.First(c => c.Type.Name == type.Name);

            DateTime lastdate = check.LastCheck;
            DateTime startdate = lastdate.Add(type.Interval.From);
            DateTime enddate = lastdate.Add(type.Interval.To);

            return new Period<DateTime>(startdate, enddate);
        }
        //returns a maintenance type if overdue
        public AirlinerMaintenanceType getOverduedMaintenance(DateTime date)
        {
            List<AirlinerMaintenanceType> types = new List<AirlinerMaintenanceType>();

            foreach (AirlinerMaintenanceCheck check in this.Checks)
            {
                Period<DateTime> nextMaintenanceWindow = new Period<DateTime>(check.LastCheck.Add(check.Type.Interval.From), check.LastCheck.Add(check.Type.Interval.To));

                if (nextMaintenanceWindow.To < GameObject.GetInstance().GameTime)
                    types.Add(check.Type);
            }
           

            if (types.Count > 0)
                return types.OrderByDescending(t => t.Penalty).First();
            else
                return null;
            
        }
        //returns the next maintenance 
        public AirlinerMaintenanceType getNextMaintenance(DateTime date)
        {
              List<AirlinerMaintenanceType> types = new List<AirlinerMaintenanceType>();

              foreach (AirlinerMaintenanceCheck check in this.Checks)
              {
                  Period<DateTime> nextMaintenanceWindow = new Period<DateTime>(check.LastCheck.Add(check.Type.Interval.From), check.LastCheck.Add(check.Type.Interval.To));

                  if (nextMaintenanceWindow.From <= date && nextMaintenanceWindow.To >= date && check.canPerformCheck())
                      types.Add(check.Type);
              }
           
              if (types.Count > 0)
                  return types.OrderByDescending(t => t.Penalty).First();
              else
                  return null;

        }
       
        //returns the check center of a specific type
        public AirlinerMaintenanceCenter getCheckCenter(AirlinerMaintenanceType type)
        {
            var check = this.Checks.FirstOrDefault(c => c.Type.Name == type.Name);

            return check.CheckCenter;
          
        }
        #endregion
    }
    //the class for an airliner check
    [Serializable]
    public class AirlinerMaintenanceCheck : ISerializable
    {
        [Versioning("lastcheck")]
        public DateTime LastCheck { get; set; }
        [Versioning("center")]
        public AirlinerMaintenanceCenter CheckCenter { get; set; }
        [Versioning("type")]
        public AirlinerMaintenanceType Type { get; set; }
        [Versioning("interval")]
        public double Interval { get; set; }
        public AirlinerMaintenanceCheck(AirlinerMaintenanceType type, DateTime lastcheck)
        {
            this.LastCheck = lastcheck;
            this.Type = type;
            this.Interval = this.Type.Interval.To.TotalDays;

        }
            private AirlinerMaintenanceCheck(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
         }
        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }
        //returns if the airliner can perform the check
        public Boolean canPerformCheck()
        {
            return this.CheckCenter != null && this.CheckCenter.hasCheck();
        }
#endregion
    }
    //the class for how a specific type is maintained for an airliner
    [Serializable]
    public class AirlinerMaintenanceCenter : ISerializable
    {
        [Versioning("type")]
        public AirlinerMaintenanceType Type { get; set; }
        [Versioning("airport")]
        public Airport Airport { get; set; }
        [Versioning("center")]
        public MaintenanceCenter Center { get; set; }
        public AirlinerMaintenanceCenter(AirlinerMaintenanceType type)
        {
            this.Type = type;
        }
          private AirlinerMaintenanceCenter(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
         }
        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }
        //returns if the type has a check
        public Boolean hasCheck()
        {
            return this.Center != null || this.Airport != null;
        }
        #endregion
        
    }
   
    //the class for a maintenance type
    [Serializable]
    public class AirlinerMaintenanceType : ISerializable
    {
         [Versioning("name")]
        public string Name { get; set; }
         [Versioning("worktime")]
        public TimeSpan Worktime { get; set; }
         [Versioning("interval")]
        public Period<TimeSpan> Interval { get; set; }
         [Versioning("requirement")]
         public AirportFacility Requirement { get; set; }
        [Versioning("penalty")]
         public double Penalty { get; set; }
 
        public AirlinerMaintenanceType(string name,Period<TimeSpan> interval, TimeSpan worktime, double penalty, AirportFacility requirement)
        {
            this.Name = name;
            this.Interval = interval;
            this.Worktime = worktime;
            this.Requirement = requirement;
            this.Penalty = penalty;
        }
         private AirlinerMaintenanceType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
         }
        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }
        #endregion
    }
    //the list of maintenance types
    public class AirlinerMaintenanceTypes
    {
        private static List<AirlinerMaintenanceType> types = new List<AirlinerMaintenanceType>();
        //adds a type to the list
        public static void AddMaintenanceType(AirlinerMaintenanceType type)
        {
            types.Add(type);
        }
        //returns the list of types
        public static List<AirlinerMaintenanceType> GetMaintenanceTypes()
        {
            return types;
        }
        //clears the list of types
        public static void Clear()
        {
            types.Clear();
        }
    }
}
