
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel.RouteModel
{
    /*! RouteTimeTableEntry.
 * This class is used for an entry in a time table
 * The class needs parameters for the time table, the day of flight, the time of flight and the destination
 */
    [Serializable]
    public class RouteTimeTableEntry : IComparable<RouteTimeTableEntry>, ISerializable
    {
        [Versioning("gate")]
        public Gate Gate { get; set; }
        [Versioning("day")]
        public DayOfWeek Day { get; set; }
        [Versioning("time")]
        public TimeSpan Time { get; set; }
        [Versioning("timetable")]
        public RouteTimeTable TimeTable { get; set; }
        [Versioning("destination")]
        public RouteEntryDestination Destination { get; set; }
        [Versioning("airliner")]
        public FleetAirliner Airliner { get; set; }
        public Airport DepartureAirport { get { return getDepartureAirport(); } set { ;} }
        [Versioning("mainentry")]
        public RouteTimeTableEntry MainEntry { get; set; }
        [Versioning("id")]
        public string ID { get; set; }
        public RouteTimeTableEntry(RouteTimeTable timeTable, DayOfWeek day, TimeSpan time, RouteEntryDestination destination)
            : this(timeTable, day, time, destination, null)
        {
        }
        public RouteTimeTableEntry(RouteTimeTable timeTable, DayOfWeek day, TimeSpan time, RouteEntryDestination destination, Gate outboundgate)
        {
             Guid id = Guid.NewGuid();

            this.Day = day;
            this.Time = time;
            this.TimeTable = timeTable;
            this.Destination = destination;
            this.ID = id.ToString();
            this.Gate = outboundgate;
         }
        //returns the departure airport
        public Airport getDepartureAirport()
        {
            return this.Destination.Airport == this.TimeTable.Route.Destination1 ? this.TimeTable.Route.Destination2 : this.TimeTable.Route.Destination1;
        }


        public int CompareTo(RouteTimeTableEntry entry)
        {
            int compare = entry.Day.CompareTo(this.Day);
            if (compare == 0)
                return entry.Time.CompareTo(this.Time);
            return compare;
        }
        //returns the timespan between two entries
        public TimeSpan getTimeDifference(RouteTimeTableEntry entry)
        {
            int daysBetween = Math.Abs(this.Day - entry.Day);

            TimeSpan time = entry.Time.Subtract(this.Time);

            return new TimeSpan(24 * daysBetween, 0, 0).Add(time);
        }
           private RouteTimeTableEntry(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }




        }
      
    }
    
}
