using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel
{
    [Serializable]
    public class AirlinerInsurance : ISerializable
    {
        #region Constructors and Destructors

        public AirlinerInsurance(
            InsuranceType insType,
            InsuranceScope insScope,
            PaymentTerms paymentTerms,
            int insAmount)
        {
            Deductible = 0;
            TermLength = 0;
            CancellationFee = 0;
            InsuredAmount = insAmount;
        }

        private AirlinerInsurance(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Enums

        public enum InsuranceScope
        {
            Airport,

            Domestic,

            Hub,

            Global
        }

        public enum InsuranceType
        {
            Liability,

            GroundParked,

            GroundTaxi,

            CombinedGround,

            InFlight,

            FullCoverage
        }

        public enum PaymentTerms
        {
            Annual,

            Biannual,

            Quarterly,

            Monthly
        }

        #endregion

        #region Public Properties

        [Versioning("cancellation")]
        public int CancellationFee { get; set; }

        [Versioning("deductible")]
        public double Deductible { get; set; }

        [Versioning("insscope")]
        public InsuranceScope InsScope { get; set; }

        [Versioning("instype")]
        public InsuranceType InsType { get; set; }

        [Versioning("insuranceeffective")]
        public DateTime InsuranceEffective { get; set; }

        [Versioning("insuranceexpires")]
        public DateTime InsuranceExpires { get; set; }

        [Versioning("insuredamount")]
        public int InsuredAmount { get; set; }

        [Versioning("nextpaymentdue")]
        public DateTime NextPaymentDue { get; set; }

        [Versioning("paymentamount")]
        public double PaymentAmount { get; set; }

        [Versioning("policyindex")]
        public string PolicyIndex { get; set; }

        [Versioning("remainingpayments")]
        public int RemainingPayments { get; set; }

        [Versioning("termlength")]
        public int TermLength { get; set; }

        [Versioning("insterms")]
        public PaymentTerms InsTerms { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }
}