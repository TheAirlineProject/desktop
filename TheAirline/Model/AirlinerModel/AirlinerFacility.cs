
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel
{
    //the class for a facility in an airliner
    [Serializable]
    public class AirlinerFacility : ISerializable
    {
        public static string Section { get; set; }
        [Versioning("uid")]
        public string Uid { get; set; }
        public enum FacilityType { Audio, Video, Seat }
        [Versioning("price")]
        private double APricePerSeat;
        public double PricePerSeat { get { return GeneralHelpers.GetInflationPrice(this.APricePerSeat); } set { this.APricePerSeat = value; } }
        [Versioning("percent")]
        public double PercentOfSeats { get; set; }
        [Versioning("type")]
        public FacilityType Type { get; set; }
        [Versioning("servicelevel")]
        public int ServiceLevel { get; set; }
        [Versioning("fromyear")]
        public int FromYear { get; set; }
        [Versioning("seatuses")]
        public double SeatUses { get; set; }
        public AirlinerFacility(string section, string uid, FacilityType type, int fromYear, int serviceLevel, double percentOfSeats, double pricePerSeat, double seatUses)
        {
            AirlinerFacility.Section = section;
            this.Uid = uid;
            this.FromYear = fromYear;
            this.PricePerSeat = pricePerSeat;
            this.PercentOfSeats = percentOfSeats;
            this.Type = type;
            this.ServiceLevel = serviceLevel;
            this.SeatUses = seatUses;
        }
        public string Name
        {
            get { return Translator.GetInstance().GetString(AirlinerFacility.Section, this.Uid); }
        }
       
        private AirlinerFacility(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    
    //lists of airliner facilities
    public class AirlinerFacilities
    {
        private static Dictionary<AirlinerFacility.FacilityType, List<AirlinerFacility>> facilities = new Dictionary<AirlinerFacility.FacilityType, List<AirlinerFacility>>();
        //clears the list
        public static void Clear()
        {
            facilities = new Dictionary<AirlinerFacility.FacilityType, List<AirlinerFacility>>();
        }
        //adds a facility to the list
        public static void AddFacility(AirlinerFacility facility)
        {
            if (!facilities.ContainsKey(facility.Type))
                facilities.Add(facility.Type, new List<AirlinerFacility>());

            facilities[facility.Type].Add(facility);
        }
        //returns the list of all facilities
        public static List<AirlinerFacility> GetAllFacilities()
        {
            return facilities.Values.SelectMany(v => v).ToList();
        }
        //returns the list of facilities for a specific type after a specific year
        public static List<AirlinerFacility> GetFacilities(AirlinerFacility.FacilityType type, int year)
        {
            if (facilities.ContainsKey(type))
                return facilities[type].FindAll((delegate(AirlinerFacility f) { return f.FromYear <= year; }));

            else
                return new List<AirlinerFacility>();
        }
        //returns the list of facilities for a specific type
        public static List<AirlinerFacility> GetFacilities(AirlinerFacility.FacilityType type)
        {
            if (facilities.ContainsKey(type))
                return facilities[type];
            else
                return new List<AirlinerFacility>();
        }
        // chs, 2011-13-10 added function to return a specific airliner facility
        //returns a facility based on name and type
        public static AirlinerFacility GetFacility(AirlinerFacility.FacilityType type, string uid)
        {
            if (GetFacilities(type).Count > 0)
                return GetFacilities(type).Find((delegate(AirlinerFacility f) { return f.Uid == uid; }));
            else
                return null;
        }
        //returns the basic facility for a specific type
        public static AirlinerFacility GetBasicFacility(AirlinerFacility.FacilityType type)
        {
            return facilities[type][0];
        }
       
    }
}
