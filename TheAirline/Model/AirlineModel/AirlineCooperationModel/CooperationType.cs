using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlineModel.AirlineCooperationModel
{
    //the class for a type of airline cooperation
    [Serializable]
    public class CooperationType : ISerializable
    {
        public static string Section { get; set; }
         [Versioning("airportsize")]
        public GeneralHelpers.Size AirportSizeRequired { get; set; }
        [Versioning("uid")]
        public string Uid { get; set; }
         [Versioning("from")]
        public int FromYear { get; set; }
         [Versioning("monthlyprice")]
        private double AMonthlyPrice;
        public double MonthlyPrice { get { return GeneralHelpers.GetInflationPrice(this.AMonthlyPrice); } set { this.AMonthlyPrice = value; } }
        [Versioning("price")]
        private double APrice;
        public double Price { get { return GeneralHelpers.GetInflationPrice(this.APrice); } set { this.APrice = value; } }
        [Versioning("servicelevel")]
        public int ServiceLevel { get; set; }
        //the expected income for a hotel per pax
         [Versioning("incomeperpax")]
        private double AIncomePerPax;
        public double IncomePerPax { get { return GeneralHelpers.GetInflationPrice(this.AIncomePerPax); } set { this.AIncomePerPax = value; } }
           public CooperationType(string section, string uid,GeneralHelpers.Size airportsizerequired,  int fromyear, double price,double monthlyprice, int servicelevel, double incomeperpax)
        {
            CooperationType.Section = section;
            this.AirportSizeRequired = airportsizerequired;
            this.Price = price;
            this.MonthlyPrice = monthlyprice;
            this.Uid = uid;
            this.FromYear = fromyear;
            this.ServiceLevel = servicelevel;
            this.IncomePerPax = incomeperpax;
        }
        public string Name
        {
            get { return Translator.GetInstance().GetString(CooperationType.Section, this.Uid); }
        }
          private CooperationType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }
            }
        }
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of types
    public class CooperationTypes
    {
        private static List<CooperationType> types = new List<CooperationType>();
        //adds a type to the list
        public static void AddCooperationType(CooperationType type)
        {
            types.Add(type);
        }
        //returns the cooperation type with a specific uid
        public static CooperationType GetCooperationType(string uid)
        {
            return types.Find(t => t.Uid == uid);
        }
        //clears the list of types
        public static void Clear()
        {
            types.Clear();
        }
        //returns all types
        public static List<CooperationType> GetCooperationTypes()
        {
            return types;
        }
    }
}
