
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlineModel
{
    /*! Airline Advertisement type class.
 * This class is used for a type of Advertisement for an airline
 * The class needs parameters for type, name, price per month and reputation level
 */
    [Serializable]
    public class AdvertisementType
    {
        public enum AirlineAdvertisementType { Newspaper=1930, Radio=1940, TV=1950, Internet=1995 }
        [Versioning("type")]
        public AirlineAdvertisementType Type { get; set; }
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("price")]
        private double APrice;
        public double Price { get { return GeneralHelpers.GetInflationPrice(this.APrice); } set { this.APrice = value; } }
        [Versioning("level")]
        public int ReputationLevel { get; set; }
        public AdvertisementType(AirlineAdvertisementType type, string name, double price, int reputationLevel)
        {
            this.Type = type;
            this.Name = name;
            this.Price = price;
            this.ReputationLevel = reputationLevel;
        }
        private AdvertisementType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    /*! Airline advertisering types class.
* This class is used for the list of Advertisement types
* The class needs no parameters and construction since it is static
*/
    public class AdvertisementTypes
    {
        private static List<AdvertisementType> types = new List<AdvertisementType>();
        /*!adds a type to the list
         * */
        public static void AddAdvertisementType(AdvertisementType type)
        {
            types.Add(type);
        }
        /*!clears the list of types
         */
        public static void Clear()
        {
            types = new List<AdvertisementType>();
        }
        /*!returns all advertisement types
         */
        public static List<AdvertisementType> GetTypes()
        {
            return types;
        }
        /*!returns the advertisement types for a specific type
         */
        public static List<AdvertisementType> GetTypes(AdvertisementType.AirlineAdvertisementType type)
        {
            return types.FindAll((delegate(AdvertisementType t) { return t.Type == type; }));
        }
        /*!returns the advertisement type for a specific type with a name
         */
        public static AdvertisementType GetType(AdvertisementType.AirlineAdvertisementType type, string name)
        {
            return GetTypes(type).Find((delegate(AdvertisementType t) { return t.Name == name; }));
        }
        /*!returns the basic advertisement
         */
        public static AdvertisementType GetBasicType(AdvertisementType.AirlineAdvertisementType type)
        {
            return GetTypes(type).Find((delegate(AdvertisementType t) { return t.ReputationLevel == 0; }));
        }
    }
}
