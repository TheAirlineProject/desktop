using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.AirlinerModel;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlineModel
{
    [Serializable]
    //the profile for an airline
    public class AirlineProfile : ISerializable
    {
        #region Constructors and Destructors

        public AirlineProfile(
            string name,
            string iata,
            string color,
            string ceo,
            Boolean isReal,
            int founded,
            int folded)
        {
            Name = name;
            IATACode = iata;
            CEO = ceo;
            Color = color;
            IsReal = isReal;
            Founded = founded;
            Folded = folded;
            Countries = new List<Country>();
            Logos = new List<AirlineLogo>();
            PreferedAircrafts = new List<AirlinerType>();
            PrimaryPurchasing = PreferedPurchasing.Random;
        }

        private AirlineProfile(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
            {
                PreferedAircrafts = new List<AirlinerType>();
            }

            if (version == 2 || version == 3)
            {
                PrimaryPurchasing = PreferedPurchasing.Random;
            }
        }

        #endregion

        #region Enums

        public enum PreferedPurchasing
        {
            Random,

            Leasing,

            Buying
        }

        #endregion

        #region Public Properties

        [Versioning("ceo")]
        public string CEO { get; set; }

        [Versioning("color")]
        public string Color { get; set; }

        [Versioning("countries")]
        public List<Country> Countries { get; set; }

        [Versioning("country")]
        public Country Country { get; set; }

        [Versioning("folded")]
        public int Folded { get; set; }

        [Versioning("founded")]
        public int Founded { get; set; }

        [Versioning("iata")]
        public string IATACode { get; set; }

        [Versioning("isreal")]
        public Boolean IsReal { get; set; }

        public string Logo
        {
            get { return GetCurrentLogo(); }
        }

        [Versioning("logoname")]
        public string LogoName { get; set; }

        [Versioning("logos")]
        public List<AirlineLogo> Logos { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("narrative")]
        public string Narrative { get; set; }

        [Versioning("aircrafttypes", Version = 2)]
        public List<AirlinerType> PreferedAircrafts { get; set; }

        [Versioning("preferedairport")]
        public Airport PreferedAirport { get; set; }

        [Versioning("purchasing", Version = 3)]
        public PreferedPurchasing PrimaryPurchasing { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 3);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        //adds a logo to the airline
        public void AddLogo(AirlineLogo logo)
        {
            Logos.Add(logo);
        }

        public void AddPreferedAircraft(AirlinerType type)
        {
            PreferedAircrafts.Add(type);
        }

        #endregion

        #region Methods

        private string GetCurrentLogo()
        {
            AirlineLogo ret =
                Logos.Find(
                    l =>
                    l.FromYear <= GameObject.GetInstance().GameTime.Year
                    && l.ToYear >= GameObject.GetInstance().GameTime.Year);

            if (!File.Exists(ret.Path))
            {
                ret.Path = string.Format("{0}\\graphics\\airlinelogos\\{1}.png", AppSettings.getDataPath(), LogoName);
            }

            return ret.Path;
        }

        #endregion

        //returns the current logo for the airline
    }

    //the class for an airline logo
    [Serializable]
    public class AirlineLogo : ISerializable
    {
        #region Constructors and Destructors

        public AirlineLogo(int fromYear, int toYear, string path)
        {
            FromYear = fromYear;
            ToYear = toYear;
            Path = path;
        }

        public AirlineLogo(string path)
            : this(1900, 2199, path)
        {
        }

        private AirlineLogo(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties()
                        .Where(
                            p =>
                            p.GetCustomAttribute(typeof (Versioning)) != null
                            && ((Versioning) p.GetCustomAttribute(typeof (Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop =
                    props.FirstOrDefault(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    prop.SetValue(this, entry.Value);
                }
            }

            IEnumerable<PropertyInfo> notSetProps =
                props.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                var ver = (Versioning) prop.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    prop.SetValue(this, ver.DefaultValue);
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("fromyear")]
        public int FromYear { get; set; }

        [Versioning("path")]
        public string Path { get; set; }

        [Versioning("toyear")]
        public int ToYear { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();
            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties().Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                var att = (Versioning) prop.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }
}