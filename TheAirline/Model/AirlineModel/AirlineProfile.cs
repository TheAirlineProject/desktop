namespace TheAirline.Model.AirlineModel
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.Serialization;

    using TheAirline.Model.AirlinerModel;
    using TheAirline.Model.AirportModel;
    using TheAirline.Model.GeneralModel;

    [Serializable]
    public struct AirlineName
    {
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("from")]
        public DateTime From { get; set; }
     
    }
    [Serializable]
    //the profile for an airline
    public class AirlineProfile : ISerializable
    {
        #region Constructors and Destructors

        public AirlineProfile(
            string name,
            string iata,
            string color,
            string ceo,
            Boolean isReal,
            int founded,
            int folded)
        {
            this.Names = new List<AirlineName>();

            this.Names.Add(new AirlineName(){From = new DateTime(this.Founded), Name = name});

            this.IATACode = iata;
            this.CEO = ceo;
            this.Color = color;
            this.IsReal = isReal;
            this.Founded = founded;
            this.Folded = folded;
            this.Countries = new List<Country>();
            this.Logos = new List<AirlineLogo>();
            this.PreferedAircrafts = new List<AirlinerType>();
            this.PrimaryPurchasing = PreferedPurchasing.Random;
            this.PreferedAirports = new Dictionary<DateTime, Airport>();
            this.FocusAirports = new List<Airport>();

        }

        private AirlineProfile(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
            {
                this.PreferedAircrafts = new List<AirlinerType>();
            }

            if (version == 2 || version == 3)
            {
                this.PrimaryPurchasing = PreferedPurchasing.Random;
            }
            if (version < 4)
            {
                this.PreferedAirports = new Dictionary<DateTime, Airport>();
                this.FocusAirports = new List<Airport>();
            }

            if (this.FocusAirports == null)
                this.FocusAirports = new List<Airport>();
        }

        #endregion

        #region Enums

        public enum PreferedPurchasing
        {
            Random,

            Leasing,

            Buying
        }

        #endregion

        #region Public Properties

        [Versioning("ceo")]
        public string CEO { get; set; }

        [Versioning("color")]
        public string Color { get; set; }

        [Versioning("countries")]
        public List<Country> Countries { get; set; }

        [Versioning("country")]
        public Country Country { get; set; }

        [Versioning("folded")]
        public int Folded { get; set; }

        [Versioning("founded")]
        public int Founded { get; set; }

        [Versioning("iata")]
        public string IATACode { get; set; }

        [Versioning("isreal")]
        public Boolean IsReal { get; set; }

        public string Logo
        {
            get
            {
                return this.getCurrentLogo();
            }
            private set
            {
                ;
            }
        }

        [Versioning("logoname")]
        public string LogoName { get; set; }

        [Versioning("logos")]
        public List<AirlineLogo> Logos { get; set; }

       public string Name 
        { 
            get
            {
                return this.getCurrentName();
            }
            private set
            {
                ;
            }
        }

        [Versioning("names")]
        public List<AirlineName> Names { get; set; }
        [Versioning("narrative")]
        public string Narrative { get; set; }

        [Versioning("aircrafttypes", Version = 2)]
        public List<AirlinerType> PreferedAircrafts { get; set; }

        [Versioning("preferedairports",Version=4)]
        public Dictionary<DateTime,Airport> PreferedAirports { get; set; }

        [Versioning("focusairports",Version=4)]
        public List<Airport> FocusAirports { get; set; }

        [Versioning("purchasing", Version = 3)]
        public PreferedPurchasing PrimaryPurchasing { get; set; }

        public Airport PreferedAirport
        {
            get
            {
                return getCurrentPreferedAirport();
            }
            private set { ;}
        }
        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 4);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        //adds a logo to the airline
        public void AddLogo(AirlineLogo logo)
        {
            this.Logos.Add(logo);
        }

        public void AddPreferedAircraft(AirlinerType type)
        {
            this.PreferedAircrafts.Add(type);
        }

        #endregion

        //returns the current logo for the airline

        #region Methods
        private Airport getCurrentPreferedAirport()
        {
            DateTime currentDate = GameObject.GetInstance().GameTime;

            if (this.PreferedAirports.Count == 1)
                return this.PreferedAirports.Values.First();

            var dates = this.PreferedAirports.Keys.OrderByDescending(d => d).ToArray();

            for (int i = 0; i < dates.Count() - 1; i++)
            {
                if (currentDate > dates[i])
                    return this.PreferedAirports[dates[i]];
            }

            return this.PreferedAirports.Values.Last();
        }
        private string getCurrentName()
        {
            if (this.Names.Count == 1)
                return this.Names[0].Name;

            var names = this.Names.OrderBy(e => e.From).ToList();

            for (int i=0; i<names.Count() -1;i++)
                if (names[i].From < GameObject.GetInstance().GameTime && names[i+1].From >= GameObject.GetInstance().GameTime)
                    return names[i].Name;
          
                          
            return names[names.Count-1].Name;

        }
        private string getCurrentLogo()
        {
            var ret =
                this.Logos.Find(
                    l =>
                        l.FromYear <= GameObject.GetInstance().GameTime.Year
                        && l.ToYear >= GameObject.GetInstance().GameTime.Year);

            if (!File.Exists(ret.Path))
            {
                ret.Path = string.Format("{0}\\graphics\\airlinelogos\\{1}.png", AppSettings.getDataPath(), LogoName);
            }

            return ret.Path;

        }

        #endregion
    }

    //the class for an airline logo
    [Serializable]
    public class AirlineLogo : ISerializable
    {
        #region Constructors and Destructors

        public AirlineLogo(int fromYear, int toYear, string path)
        {
            this.FromYear = fromYear;
            this.ToYear = toYear;
            this.Path = path;
        }

        public AirlineLogo(string path)
            : this(1900, 2199, path)
        {
        }

        private AirlineLogo(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties()
                        .Where(
                            p =>
                                p.GetCustomAttribute(typeof(Versioning)) != null
                                && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop =
                    props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    prop.SetValue(this, entry.Value);
                }
            }

            IEnumerable<PropertyInfo> notSetProps =
                props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                var ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    prop.SetValue(this, ver.DefaultValue);
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("fromyear")]
        public int FromYear { get; set; }

        [Versioning("path")]
        public string Path { get; set; }

        [Versioning("toyear")]
        public int ToYear { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                var att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }
}