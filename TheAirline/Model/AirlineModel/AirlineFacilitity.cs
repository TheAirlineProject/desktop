using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.GeneralModel;
using TheAirline.Model.PilotModel;

namespace TheAirline.Model.AirlineModel
{
    //the class for an airlines facilities
    [Serializable]
    public class AirlineFacility : ISerializable
    {
        #region Constructors and Destructors

        public AirlineFacility(
            string section,
            string uid,
            double price,
            double monthlyCost,
            int fromYear,
            int serviceLevel,
            int luxuryLevel)
        {
            Section = section;
            Uid = uid;
            FromYear = fromYear;
            MonthlyCost = monthlyCost;
            Price = price;
            LuxuryLevel = luxuryLevel;
            ServiceLevel = serviceLevel;
        }

        public AirlineFacility(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        public static string Section { get; set; }

        [Versioning("monthlycost")]
        public double AMonthlyCost { get; set; }

        [Versioning("price")]
        public double APrice { get; set; }

        //for repairing airliners 

        [Versioning("fromyear")]
        public int FromYear { get; set; }

        [Versioning("luxury")]
        public int LuxuryLevel { get; set; }

        public double MonthlyCost
        {
            get { return GeneralHelpers.GetInflationPrice(AMonthlyCost); }
            set { AMonthlyCost = value; }
        }

        public virtual string Name
        {
            get { return Translator.GetInstance().GetString(Section, Uid); }
        }

        public double Price
        {
            get { return GeneralHelpers.GetInflationPrice(APrice); }
            set { APrice = value; }
        }

        [Versioning("service")]
        public int ServiceLevel { get; set; }

        public virtual string Shortname
        {
            get { return Translator.GetInstance().GetString(Section, Uid, "shortname"); }
        }

        [Versioning("uid")]
        public string Uid { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (!(this is PilotTrainingFacility))
            {
                info.AddValue("version", 1);
            }

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the collection of facilities
    public class AirlineFacilities
    {
        #region Static Fields

        private static readonly List<AirlineFacility> Facilities = new List<AirlineFacility>();

        #endregion

        #region Public Methods and Operators

        public static void AddFacility(AirlineFacility facility)
        {
            Facilities.Add(facility);
        }

        public static void Clear()
        {
            Facilities.Clear();
        }

        //returns a facility

        //returns the list of facilities
        public static List<AirlineFacility> GetFacilities()
        {
            return Facilities;
        }

        public static List<AirlineFacility> GetFacilities(Predicate<AirlineFacility> match)
        {
            return Facilities.FindAll(match);
        }

        public static AirlineFacility GetFacility(string uid)
        {
            return Facilities.Find(f => f.Uid == uid);
        }

        #endregion

        //clears the list

        //adds a new facility to the collection
    }
}