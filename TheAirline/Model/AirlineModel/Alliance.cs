namespace TheAirline.Model.AirlineModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.Serialization;

    using TheAirline.Model.AirportModel;
    using TheAirline.Model.GeneralModel;

    [Serializable]
    //the class for an alliance of airlines
    public class Alliance : ISerializable
    {
        #region Constructors and Destructors

        public Alliance(DateTime formationDate, string name, Airport headquarter)
        {
            this.FormationDate = formationDate;
            this.Name = name;
            this.Members = new List<AllianceMember>();
            this.PendingMembers = new List<PendingAllianceMember>();
            this.Headquarter = headquarter;
        }

        private Alliance(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("date")]
        public DateTime FormationDate { get; set; }

        [Versioning("headquarter")]
        public Airport Headquarter { get; set; }

        public Boolean IsHumanAlliance
        {
            get
            {
                return this.Members.ToList().Exists(m => m.Airline.IsHuman);
            }
            private set
            {
                ;
            }
        }

        [Versioning("logo")]
        public string Logo { get; set; }

        [Versioning("members")]
        public List<AllianceMember> Members { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("pending")]
        public List<PendingAllianceMember> PendingMembers { get; set; }

        #endregion

        #region Public Methods and Operators

        public static string GenerateAllianceName()
        {
            var rnd = new Random();

            string[] tNames =
            {
                "Wings Alliance", "Qualiflyer", "Air Team", "Sky Alliance", "WOW Alliance",
                "Air Alliance", "Blue Sky", "Golden Circle Alliance", "Skywalkers", "One Air Alliance"
            };
            List<string> aNames = (from a in Alliances.GetAlliances() select a.Name).ToList();

            List<string> names = tNames.ToList().Except(aNames).ToList();

            return names[rnd.Next(names.Count)];
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        //adds an airline to the alliance
        public void addMember(AllianceMember airline)
        {
            this.Members.Add(airline);
            airline.Airline.addAlliance(this);
        }

        public void addPendingMember(PendingAllianceMember pending)
        {
            PendingAllianceMember member = this.PendingMembers.FirstOrDefault(p => p.Airline == pending.Airline);

            if (member != null)
            {
                this.removePendingMember(member);
            }

            this.PendingMembers.Add(pending);
        }

        //removes an airline from the alliance
        public void removeMember(AllianceMember airline)
        {
            this.Members.Remove(airline);
            airline.Airline.removeAlliance(this);
        }

        public void removeMember(Airline airline)
        {
            AllianceMember member = this.Members.FirstOrDefault(m => m.Airline == airline);
            this.Members.Remove(member);
            airline.removeAlliance(this);
        }

        //adds a pending member to the alliance

        //removes a pending member from the alliance
        public void removePendingMember(PendingAllianceMember pending)
        {
            this.PendingMembers.Remove(pending);
        }

        #endregion

        //the method for generating an alliance name
    }

    //the list of alliances
    public class Alliances
    {
        #region Static Fields

        private static readonly List<Alliance> alliances = new List<Alliance>();

        #endregion

        //adds an alliance to the list

        #region Public Methods and Operators

        public static void AddAlliance(Alliance alliance)
        {
            alliances.Add(alliance);
        }

        //removes an alliance from the list

        //clears the list of alliances
        public static void Clear()
        {
            alliances.Clear();
        }

        public static List<Alliance> GetAlliances()
        {
            return alliances;
        }

        public static void RemoveAlliance(Alliance alliance)
        {
            alliances.Remove(alliance);
        }

        #endregion
    }

    [Serializable]
    //the class for pending acceptions to an alliance
    public class PendingAllianceMember : ISerializable
    {
        #region Constructors and Destructors

        public PendingAllianceMember(DateTime date, Alliance alliance, Airline airline, AcceptType type)
        {
            this.Alliance = alliance;
            this.Airline = airline;
            this.Date = date;
            this.Type = type;
        }

        private PendingAllianceMember(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Enums

        public enum AcceptType
        {
            Invitation,

            Request
        }

        #endregion

        #region Public Properties

        public Airline Airline { get; set; }

        public Alliance Alliance { get; set; }

        public DateTime Date { get; set; }

        public AcceptType Type { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }
}