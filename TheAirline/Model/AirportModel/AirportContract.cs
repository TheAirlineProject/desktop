
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirportModel
{
    [Serializable]
    //the class for a contract at an airport for an airline
    public class AirportContract : ISerializable
    {
        public enum ContractType { Full, Full_Service, Medium_Service, Low_Service }
        [Versioning("type",Version=2)]
        public ContractType Type { get; set; }
        [Versioning("airline")]
        public Airline Airline { get; set; }
        [Versioning("airport")]
        public Airport Airport { get; set; }
        [Versioning("date")]
        public DateTime ContractDate { get; set; }
        [Versioning("length")]
        public int Length { get; set; }
        [Versioning("yearlypayment")]
        public double YearlyPayment { get; set; }
        [Versioning("gates")]
        public int NumberOfGates { get; set; }
        [Versioning("isexclusive")]
        public Boolean IsExclusiveDeal { get; set; }
        public int MonthsLeft { get { return getMonthsLeft();} set { ;} }
        [Versioning("terminal")]
        public Terminal Terminal { get; set; }
        [Versioning("expire")]
        public DateTime ExpireDate { get; set; }
        [Versioning("payfull")]
        public Boolean PayFull { get; set; }
        public AirportContract(Airline airline, Airport airport, ContractType type, DateTime date, int numberOfGates, int length, double yearlyPayment,Boolean payFull = false, Boolean isExclusiveDeal = false, Terminal terminal = null)
        {
            this.Type = type;
            this.PayFull = payFull;
            this.Airline = airline;
            this.Airport = airport;
            this.ContractDate = date;
            this.Length = length;
            this.YearlyPayment = yearlyPayment;
            this.NumberOfGates = numberOfGates;
            this.IsExclusiveDeal = isExclusiveDeal;
            this.Terminal = terminal;
            this.ExpireDate = this.ContractDate.AddYears(this.Length);

        }
        //returns the number of months left for the contract
        public int getMonthsLeft()
        {
            return MathHelpers.GetMonthsBetween(GameObject.GetInstance().GameTime, this.ContractDate.AddYears(this.Length));
        }
           private AirportContract(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }

            if (version == 1)
            {
                this.Type = ContractType.Full;
            }


        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
