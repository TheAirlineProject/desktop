using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirportModel
{
    [Serializable]
    //the class for a contract at an airport for an airline
    public class AirportContract : ISerializable
    {
        #region Constructors and Destructors

        public AirportContract(
            Airline airline,
            Airport airport,
            ContractType type,
            Terminal.TerminalType terminaltype,
            DateTime date,
            int numberOfGates,
            int length,
            double yearlyPayment,
            Boolean autorenew,
            Boolean payFull = false,
            Boolean isExclusiveDeal = false,
            Terminal terminal = null)
        {
            Type = type;
            PayFull = payFull;
            Airline = airline;
            Airport = airport;
            ContractDate = date;
            Length = length;
            YearlyPayment = yearlyPayment;
            NumberOfGates = numberOfGates;
            IsExclusiveDeal = isExclusiveDeal;
            Terminal = terminal;
            ExpireDate = ContractDate.AddYears(Length);
            AutoRenew = autorenew;
            TerminalType = terminaltype;
        }

        private AirportContract(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
            {
                Type = ContractType.Full;
            }
            if (version == 2)
            {
                AutoRenew = true;
            }
            if (version < 4)
                TerminalType = Terminal.TerminalType.Passenger;
        }

        #endregion

        #region Enums

        public enum ContractType
        {
            Full,

            FullService,

            MediumService,

            LowService
        }

        #endregion

        #region Public Properties

        [Versioning("airline")]
        public Airline Airline { get; set; }

        [Versioning("airport")]
        public Airport Airport { get; set; }

        [Versioning("renew", Version = 3)]
        public Boolean AutoRenew { get; set; }

        [Versioning("date")]
        public DateTime ContractDate { get; set; }

        [Versioning("expire")]
        public DateTime ExpireDate { get; set; }

        [Versioning("isexclusive")]
        public Boolean IsExclusiveDeal { get; set; }

        [Versioning("terminaltype", Version = 4)]
        public Terminal.TerminalType TerminalType { get; set; }

        [Versioning("length")]
        public int Length { get; set; }

        public int MonthsLeft
        {
            get { return GetMonthsLeft(); }
        }

        [Versioning("gates")]
        public int NumberOfGates { get; set; }

        [Versioning("payfull")]
        public Boolean PayFull { get; set; }

        [Versioning("terminal")]
        public Terminal Terminal { get; set; }

        [Versioning("type", Version = 2)]
        public ContractType Type { get; set; }

        [Versioning("yearlypayment")]
        public double YearlyPayment { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 4);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public int GetMonthsLeft()
        {
            return MathHelpers.GetMonthsBetween(
                GameObject.GetInstance().GameTime,
                ContractDate.AddYears(Length));
        }

        #endregion
    }
}