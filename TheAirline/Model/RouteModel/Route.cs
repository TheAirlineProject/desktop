using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.AirlinerModel;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;
using TheAirline.Model.GeneralModel.Helpers;
using TheAirline.Model.GeneralModel.InvoicesModel;
using TheAirline.Model.GeneralModel.WeatherModel;

namespace TheAirline.Model.RouteModel
{
    [Serializable]
    //the class for a route
    public abstract class Route : ISerializable
    {
        #region Constants

        public const double MinRouteDistance = 10;

        #endregion

        #region Constructors and Destructors

        public Route(RouteType type, string id, Airport destination1, Airport destination2, DateTime startDate)
        {
            Type = type;
            Id = id;
            Destination1 = destination1;
            Destination2 = destination2;
            StartDate = startDate;

            TimeTable = new RouteTimeTable(this);
            Invoices = new Invoices();
            Statistics = new RouteStatistics();
            Banned = false;
            Stopovers = new List<StopoverRoute>();

            Season = Weather.Season.AllYear;
        }

        protected Route(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
            {
                StartDate = new DateTime(1950, 1, 1);
            }
        }

        #endregion

        #region Enums

        public enum RouteType
        {
            Cargo,

            Mixed,

            Passenger,

            Helicopter
        }

        #endregion

        #region Public Properties

        [Versioning("airline")]
        public Airline Airline { get; set; }

        public double Balance
        {
            get { return GetBalance(); }
        }

        [Versioning("banned")]
        public Boolean Banned { get; set; }

        [Versioning("destination1")]
        public Airport Destination1 { get; set; }

        [Versioning("destination2")]
        public Airport Destination2 { get; set; }

        public double FillingDegree
        {
            get { return GetFillingDegree(); }
        }

        public Boolean HasAirliner
        {
            get { return GetAirliners().Count > 0; }
        }

        public Boolean HasStopovers
        {
            get { return Stopovers.Count > 0; }
        }

        [Versioning("id")]
        public string Id { get; set; }

        [Versioning("invoices")]
        public Invoices Invoices { get; set; }

        public Boolean IsCargoRoute
        {
            get { return Type == RouteType.Cargo; }
        }

        [Versioning("lastupdated")]
        public DateTime LastUpdated { get; set; }

        [Versioning("season")]
        public Weather.Season Season { get; set; }

        [Versioning("startdate", Version = 2, AutoGenerated = false)]
        public DateTime StartDate { get; set; }

        [Versioning("statistics")]
        public RouteStatistics Statistics { get; set; }

        [Versioning("stopovers")]
        public List<StopoverRoute> Stopovers { get; set; }

        [Versioning("timetable")]
        public RouteTimeTable TimeTable { get; set; }

        [Versioning("type")]
        public RouteType Type { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void AddRouteInvoice(Invoice invoice)
        {
            Invoices.AddInvoice(invoice);
        }

        //adds a stop over to the route
        public void AddStopover(StopoverRoute stopover)
        {
            Stopovers.Add(stopover);
        }

        public void ClearRouteStats()
        {
            Statistics.Stats.Clear();
        }

        //removes a stop over from the route

        //returns if the route contains a specific destination
        public Boolean ContainsDestination(Airport destination)
        {
            return Destination1 == destination || Destination2 == destination;
        }

        public List<FleetAirliner> GetAirliners()
        {
            var entries = new List<RouteTimeTableEntry>(TimeTable.Entries);
            /*
            List<FleetAirliner> mainEntries = (from e in entries where e!=null && e.MainEntry != null && e.MainEntry.Airliner != null select e.MainEntry.Airliner).Distinct().ToList();
            List<FleetAirliner> allAirliners = (from e in entries where e!=null && e.Airliner != null select e.Airliner).Distinct().ToList();
            allAirliners.AddRange(mainEntries);
            */

            IEnumerable<FleetAirliner> tx = entries.Where(e => e != null && e.Airliner != null).Select(e => e.Airliner);
            IEnumerable<FleetAirliner> tMain =
                entries.Where(e => e != null && e.MainEntry != null && e.MainEntry.Airliner != null)
                       .Select(e => e.MainEntry.Airliner)
                       .Distinct();

            IEnumerable<FleetAirliner> tAll = tx.Union(tMain);

            return tAll.ToList();
        }

        public double GetBalance(DateTime startTime, DateTime endTime)
        {
            return GetRouteInvoiceAmount(Invoice.InvoiceType.Total, startTime, endTime);
        }

        public FleetAirliner GetCurrentAirliner()
        {
            return
                GetAirliners().Find(f => f.CurrentFlight != null && f.CurrentFlight.Entry.TimeTable.Route == this);
        }

        //returns the list of destinations
        public List<Airport> GetDestinations()
        {
            var dests = new List<Airport>();
            dests.Add(Destination1);
            dests.Add(Destination2);

            return dests;
        }

        public double GetDistance()
        {
            if (HasStopovers)
            {
                return Stopovers.SelectMany(s => s.Legs).Max(l => l.GetDistance());
            }
            return
                Destination1.Profile.Coordinates.ConvertToGeoCoordinate()
                            .GetDistanceTo(Destination2.Profile.Coordinates.ConvertToGeoCoordinate())/1000;
        }

        public abstract double GetFillingDegree();

        public TimeSpan GetFlightTime(AirlinerType type)
        {
            if (HasStopovers)
            {
                double totalMinutes = Stopovers.SelectMany(s => s.Legs)
                                               .Sum(l => l.GetFlightTime(type).TotalMinutes);
                double totalRestTime = FleetAirlinerHelpers.GetMinTimeBetweenFlights(type).TotalMinutes
                                       *(Stopovers.SelectMany(s => s.Legs).Count() - 1);
                var time = (int) (totalRestTime + totalMinutes);

                return new TimeSpan(0, time, 0);
            }
            return MathHelpers.GetFlightTime(Destination1, Destination2, type);
        }

        //returns all invoices for the route
        public Invoices GetInvoices()
        {
            return Invoices;
        }

        //returns invoices amount for a specific type for a route
        public double GetRouteInvoiceAmount(Invoice.InvoiceType type)
        {
            double amount = 0;
            foreach (StopoverRoute stopover in Stopovers)
            {
                amount += stopover.Legs.Sum(l => l.GetRouteInvoiceAmount(type));
            }

            if (type == Invoice.InvoiceType.Total)
            {
                amount += Invoices.GetAmount();
            }
            else
            {
                amount += Invoices.GetAmount(type);
            }

            return amount;
        }

        //returns the invoices amount for a specific type for a period
        public double GetRouteInvoiceAmount(Invoice.InvoiceType type, DateTime startTime, DateTime endTime)
        {
            int startYear = startTime.Year;
            int endYear = endTime.Year;

            int startMonth = startTime.Month;
            int endMonth = endTime.Month;

            int totalMonths = (endMonth - startMonth) + 12*(endYear - startYear);

            double totalAmount = 0;

            var date = new DateTime(startYear, startMonth, 1);

            for (int i = 0; i < totalMonths; i++)
            {
                if (type == Invoice.InvoiceType.Total)
                {
                    totalAmount += Invoices.GetAmount(date.Year, date.Month);
                }
                else
                {
                    totalAmount += Invoices.GetAmount(type, date.Year, date.Month);
                }

                date = date.AddMonths(1);
            }

            return totalAmount;
        }

        //returns the list of invoice types for a route
        public List<Invoice.InvoiceType> GetRouteInvoiceTypes()
        {
            var types = new List<Invoice.InvoiceType>();

            types.Add(Invoice.InvoiceType.Tickets);
            types.Add(Invoice.InvoiceType.OnFlightIncome);
            types.Add(Invoice.InvoiceType.Fees);

            types.Add(Invoice.InvoiceType.Maintenances);
            types.Add(Invoice.InvoiceType.FlightExpenses);
            types.Add(Invoice.InvoiceType.Wages);

            types.Add(Invoice.InvoiceType.Total);

            return types;
        }

        public void RemoveStopover(Airport stopover)
        {
            Stopovers.Remove(Stopovers.Find(s => s.Stopover == stopover));
        }

        public void SetRouteInvoice(Invoice.InvoiceType type, int year, int month, int day, double amount)
        {
            Invoices.AddInvoice(type, year, month, day, amount);
        }

        #endregion

        #region Methods

        private double GetBalance()
        {
            return GetRouteInvoiceAmount(Invoice.InvoiceType.Total);
        }

        #endregion

        //returns the balance for the route for a period

        //get the balance for the route 

        //returns all airliners assigned to the route
    }
}