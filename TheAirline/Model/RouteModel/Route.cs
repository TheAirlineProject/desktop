namespace TheAirline.Model.AirlinerModel.RouteModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.Serialization;

    using TheAirline.Model.AirlineModel;
    using TheAirline.Model.AirportModel;
    using TheAirline.Model.GeneralModel;
    using TheAirline.Model.GeneralModel.Helpers;
    using TheAirline.Model.GeneralModel.InvoicesModel;
    using TheAirline.Model.GeneralModel.WeatherModel;

    [Serializable]
    //the class for a route
    public abstract class Route : ISerializable
    {
        #region Constants

        public const double MinRouteDistance = 10;

        #endregion

        #region Constructors and Destructors

        public Route(RouteType type, string id, Airport destination1, Airport destination2, DateTime startDate)
        {
            this.Type = type;
            this.Id = id;
            this.Destination1 = destination1;
            this.Destination2 = destination2;
            this.StartDate = startDate;

            this.TimeTable = new RouteTimeTable(this);
            this.Invoices = new Invoices();
            this.Statistics = new RouteStatistics();
            this.Banned = false;
            this.Stopovers = new List<StopoverRoute>();

            this.Season = Weather.Season.All_Year;
        }

        protected Route(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
            {
                this.StartDate = new DateTime(1950, 1, 1);
            }
        }

        #endregion

        #region Enums

        public enum RouteType
        {
            Cargo,

            Mixed,

            Passenger,

            Helicopter
        }

        #endregion

        #region Public Properties

        [Versioning("airline")]
        public Airline Airline { get; set; }

        public double Balance
        {
            get
            {
                return this.getBalance();
            }
            set
            {
                ;
            }
        }

        [Versioning("banned")]
        public Boolean Banned { get; set; }

        [Versioning("destination1")]
        public Airport Destination1 { get; set; }

        [Versioning("destination2")]
        public Airport Destination2 { get; set; }

        public double FillingDegree
        {
            get
            {
                return this.getFillingDegree();
            }
            set
            {
                ;
            }
        }

        public Boolean HasAirliner
        {
            get
            {
                return this.getAirliners().Count > 0;
            }
            set
            {
                ;
            }
        }

        public Boolean HasStopovers
        {
            get
            {
                return this.Stopovers.Count > 0;
            }
            set
            {
                ;
            }
        }

        [Versioning("id")]
        public string Id { get; set; }

        [Versioning("invoices")]
        public Invoices Invoices { get; set; }

        public Boolean IsCargoRoute
        {
            get
            {
                return this.Type == RouteType.Cargo;
            }
            set
            {
                ;
            }
        }

        [Versioning("lastupdated")]
        public DateTime LastUpdated { get; set; }

        [Versioning("season")]
        public Weather.Season Season { get; set; }

        [Versioning("startdate", Version = 2, AutoGenerated = false)]
        public DateTime StartDate { get; set; }

        [Versioning("statistics")]
        public RouteStatistics Statistics { get; set; }

        [Versioning("stopovers")]
        public List<StopoverRoute> Stopovers { get; set; }

        [Versioning("timetable")]
        public RouteTimeTable TimeTable { get; set; }

        [Versioning("type")]
        public RouteType Type { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void addRouteInvoice(Invoice invoice)
        {
            this.Invoices.addInvoice(invoice);
        }

        //adds a stop over to the route
        public void addStopover(StopoverRoute stopover)
        {
            this.Stopovers.Add(stopover);
        }

        public void clearRouteStats()
        {
            this.Statistics.Stats.Clear();
        }

        //removes a stop over from the route

        //returns if the route contains a specific destination
        public Boolean containsDestination(Airport destination)
        {
            return this.Destination1 == destination || this.Destination2 == destination;
        }

        public List<FleetAirliner> getAirliners()
        {
            var entries = new List<RouteTimeTableEntry>(this.TimeTable.Entries);
            /*
            List<FleetAirliner> mainEntries = (from e in entries where e!=null && e.MainEntry != null && e.MainEntry.Airliner != null select e.MainEntry.Airliner).Distinct().ToList();
            List<FleetAirliner> allAirliners = (from e in entries where e!=null && e.Airliner != null select e.Airliner).Distinct().ToList();
            allAirliners.AddRange(mainEntries);
            */

            IEnumerable<FleetAirliner> tx = entries.Where(e => e != null && e.Airliner != null).Select(e => e.Airliner);
            IEnumerable<FleetAirliner> tMain =
                entries.Where(e => e != null && e.MainEntry != null && e.MainEntry.Airliner != null)
                    .Select(e => e.MainEntry.Airliner)
                    .Distinct();

            IEnumerable<FleetAirliner> tAll = tx.Union(tMain);

            return tAll.ToList();
        }

        public double getBalance(DateTime startTime, DateTime endTime)
        {
            return this.getRouteInvoiceAmount(Invoice.InvoiceType.Total, startTime, endTime);
        }

        public FleetAirliner getCurrentAirliner()
        {
            return
                this.getAirliners().Find(f => f.CurrentFlight != null && f.CurrentFlight.Entry.TimeTable.Route == this);
        }

        //returns the list of destinations
        public List<Airport> getDestinations()
        {
            var dests = new List<Airport>();
            dests.Add(this.Destination1);
            dests.Add(this.Destination2);

            return dests;
        }

        public double getDistance()
        {
            if (this.HasStopovers)
            {
                return this.Stopovers.SelectMany(s => s.Legs).Max(l => l.getDistance());
            }
            return
                this.Destination1.Profile.Coordinates.convertToGeoCoordinate()
                    .GetDistanceTo(this.Destination2.Profile.Coordinates.convertToGeoCoordinate()) / 1000;
        }

        public abstract double getFillingDegree();

        public TimeSpan getFlightTime(AirlinerType type)
        {
            if (this.HasStopovers)
            {
                double totalMinutes = this.Stopovers.SelectMany(s => s.Legs)
                    .Sum(l => l.getFlightTime(type).TotalMinutes);
                double totalRestTime = FleetAirlinerHelpers.GetMinTimeBetweenFlights(type).TotalMinutes
                                       * (this.Stopovers.SelectMany(s => s.Legs).Count() - 1);
                var time = (int)(totalRestTime + totalMinutes);

                return new TimeSpan(0, time, 0);
            }
            return MathHelpers.GetFlightTime(this.Destination1, this.Destination2, type);
        }

        //returns all invoices for the route
        public Invoices getInvoices()
        {
            return this.Invoices;
        }

        //returns invoices amount for a specific type for a route
        public double getRouteInvoiceAmount(Invoice.InvoiceType type)
        {
            double amount = 0;
            foreach (StopoverRoute stopover in this.Stopovers)
            {
                amount += stopover.Legs.Sum(l => l.getRouteInvoiceAmount(type));
            }

            if (type == Invoice.InvoiceType.Total)
            {
                amount += this.Invoices.getAmount();
            }
            else
            {
                amount += this.Invoices.getAmount(type);
            }

            return amount;
        }

        //returns the invoices amount for a specific type for a period
        public double getRouteInvoiceAmount(Invoice.InvoiceType type, DateTime startTime, DateTime endTime)
        {
            int startYear = startTime.Year;
            int endYear = endTime.Year;

            int startMonth = startTime.Month;
            int endMonth = endTime.Month;

            int totalMonths = (endMonth - startMonth) + 12 * (endYear - startYear);

            double totalAmount = 0;

            var date = new DateTime(startYear, startMonth, 1);

            for (int i = 0; i < totalMonths; i++)
            {
                if (type == Invoice.InvoiceType.Total)
                {
                    totalAmount += this.Invoices.getAmount(date.Year, date.Month);
                }
                else
                {
                    totalAmount += this.Invoices.getAmount(type, date.Year, date.Month);
                }

                date = date.AddMonths(1);
            }

            return totalAmount;
        }

        //returns the list of invoice types for a route
        public List<Invoice.InvoiceType> getRouteInvoiceTypes()
        {
            var types = new List<Invoice.InvoiceType>();

            types.Add(Invoice.InvoiceType.Tickets);
            types.Add(Invoice.InvoiceType.OnFlight_Income);
            types.Add(Invoice.InvoiceType.Fees);

            types.Add(Invoice.InvoiceType.Maintenances);
            types.Add(Invoice.InvoiceType.Flight_Expenses);
            types.Add(Invoice.InvoiceType.Wages);

            types.Add(Invoice.InvoiceType.Total);

            return types;
        }

        public void removeStopover(Airport stopover)
        {
            this.Stopovers.Remove(this.Stopovers.Find(s => s.Stopover == stopover));
        }

        public void setRouteInvoice(Invoice.InvoiceType type, int year, int month,int day, double amount)
        {
            this.Invoices.addInvoice(type, year, month,day, amount);
        }

        #endregion

        //returns the balance for the route for a period

        //get the balance for the route 

        #region Methods

        private double getBalance()
        {
            return this.getRouteInvoiceAmount(Invoice.InvoiceType.Total);
        }

        #endregion

        //returns all airliners assigned to the route
    }
}