
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.HistoricEventModel
{
    //the class for a historic event
    [Serializable]
    public class HistoricEvent : ISerializable
    {
          [Versioning("name")]
        public string Name { get; set; }
          [Versioning("date")]
          public DateTime Date { get; set; }
          [Versioning("text")]
          public string Text { get; set; }
          [Versioning("influences")]
          public List<HistoricEventInfluence> Influences { get; set; }
        public HistoricEvent(string name,string text,DateTime date)
        {
            this.Name = name;
            this.Text = text;
            this.Date = date;
            this.Influences = new List<HistoricEventInfluence>();
        }
        //adds an influence to the event
        public void addInfluence(HistoricEventInfluence influence)
        {
            this.Influences.Add(influence);
        }
             private HistoricEvent(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of historic events
    public class HistoricEvents
    {
        private static List<HistoricEvent> events = new List<HistoricEvent>();
        //adds an event to the list
        public static void AddHistoricEvent(HistoricEvent e)
        {
            events.Add(e);
        }
        //returns all historic events 
        public static List<HistoricEvent> GetHistoricEvents()
        {
            return events;
        }
        //returns all historic events for a date
        public static List<HistoricEvent> GetHistoricEvents(DateTime date)
        {
            return events.FindAll(e => e.Date.ToShortDateString() == date.ToShortDateString());
        }
        //returns all historic events with influences ending at a date
        public static List<HistoricEventInfluence> GetHistoricEventInfluences(DateTime date)
        {
            return events.Where(e=>e.Date>=GameObject.GetInstance().StartDate).SelectMany(e => e.Influences.FindAll(i => i.EndDate.ToShortDateString() == date.ToShortDateString())).ToList();
         }
        //clears the list of historic events
        public static void Clear()
        {
            events.Clear();
        }
    }
}
