using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace TheAirline.Model.GeneralModel.HistoricEventModel
{
    //the class for a historic event
    [Serializable]
    public class HistoricEvent : ISerializable
    {
        #region Constructors and Destructors

        public HistoricEvent(string name, string text, DateTime date)
        {
            Name = name;
            Text = text;
            Date = date;
            Influences = new List<HistoricEventInfluence>();
        }

        //adds an influence to the event

        private HistoricEvent(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("date")]
        public DateTime Date { get; set; }

        [Versioning("influences")]
        public List<HistoricEventInfluence> Influences { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("text")]
        public string Text { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void AddInfluence(HistoricEventInfluence influence)
        {
            Influences.Add(influence);
        }

        #endregion
    }

    //the list of historic events
    public class HistoricEvents
    {
        #region Static Fields

        private static readonly List<HistoricEvent> events = new List<HistoricEvent>();

        #endregion

        #region Public Methods and Operators

        public static void AddHistoricEvent(HistoricEvent e)
        {
            events.Add(e);
        }

        public static void Clear()
        {
            events.Clear();
        }

        public static List<HistoricEventInfluence> GetHistoricEventInfluences(DateTime date)
        {
            return
                events.Where(e => e.Date >= GameObject.GetInstance().StartDate)
                      .SelectMany(
                          e => e.Influences.FindAll(i => i.EndDate.ToShortDateString() == date.ToShortDateString()))
                      .ToList();
        }

        //returns all historic events 
        public static List<HistoricEvent> GetHistoricEvents()
        {
            return events;
        }

        //returns all historic events for a date
        public static List<HistoricEvent> GetHistoricEvents(DateTime date)
        {
            return events.FindAll(e => e.Date.ToShortDateString() == date.ToShortDateString());
        }

        #endregion

        //adds an event to the list

        //returns all historic events with influences ending at a date
    }
}