using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace TheAirline.Model.GeneralModel
{
    //the class for a difficulty level
    [Serializable]
    public class DifficultyLevel : ISerializable
    {
        #region Constructors and Destructors

        public DifficultyLevel(
            string name,
            double money,
            double loan,
            double passengers,
            double price,
            double ai,
            double startdata)
        {
            Name = name;
            MoneyLevel = money;
            LoanLevel = loan;
            PassengersLevel = passengers;
            PriceLevel = price;
            AILevel = ai;
            StartDataLevel = startdata;
        }

        private DifficultyLevel(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("ailevel")]
        public double AILevel { get; set; }

        [Versioning("loanlevel")]
        public double LoanLevel { get; set; }

        [Versioning("moneylevel")]
        public double MoneyLevel { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("passengerlevel")]
        public double PassengersLevel { get; set; }

        [Versioning("pricelevel")]
        public double PriceLevel { get; set; }

        [Versioning("startdatalevel")]
        public double StartDataLevel { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the list of diffiulty levels
    public class DifficultyLevels
    {
        #region Static Fields

        private static List<DifficultyLevel> levels = new List<DifficultyLevel>();

        #endregion

        #region Public Methods and Operators

        public static void AddDifficultyLevel(DifficultyLevel level)
        {
            levels.Add(level);
        }

        public static void Clear()
        {
            levels = new List<DifficultyLevel>();
        }

        //returns the list of levels

        //returns a difficulty level based on name
        public static DifficultyLevel GetDifficultyLevel(string name)
        {
            return levels.Find(l => l.Name == name);
        }

        public static List<DifficultyLevel> GetDifficultyLevels()
        {
            return levels;
        }

        //removes a difficulty level
        public static void RemoveDifficultyLevel(DifficultyLevel level)
        {
            levels.Remove(level);
        }

        #endregion

        //adds a difficulty level to the level

        //clears the list of difficulties
    }
}