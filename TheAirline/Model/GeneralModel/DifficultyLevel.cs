
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel
{
    //the class for a difficulty level
    [Serializable]
    public class DifficultyLevel : ISerializable
    {
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("moneylevel")]
        public double MoneyLevel { get; set; }
        [Versioning("loanlevel")]
        public double LoanLevel { get; set; }
        [Versioning("passengerlevel")]
        public double PassengersLevel { get; set; }
        [Versioning("pricelevel")]
        public double PriceLevel { get; set; }
        [Versioning("ailevel")]
        public double AILevel { get; set; }
        [Versioning("startdatalevel")]
        public double StartDataLevel { get; set; }
        public DifficultyLevel(string name, double money, double loan, double passengers, double price, double AI,double startdata)
        {
            this.Name = name;
            this.MoneyLevel = money;
            this.LoanLevel = loan;
            this.PassengersLevel = passengers;
            this.PriceLevel = price;
            this.AILevel = AI;
            this.StartDataLevel = startdata;
        }
           private DifficultyLevel(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }

        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of diffiulty levels
    public class DifficultyLevels
    {
        private static List<DifficultyLevel> levels = new List<DifficultyLevel>();
        //adds a difficulty level to the level
        public static void AddDifficultyLevel(DifficultyLevel level)
        {
            levels.Add(level);
        }
        //returns the list of levels
        public static List<DifficultyLevel> GetDifficultyLevels()
        {
            return levels;
        }
        //returns a difficulty level based on name
        public static DifficultyLevel GetDifficultyLevel(string name) 
        {
            return levels.Find(l => l.Name == name);
        }
        //removes a difficulty level
        public static void RemoveDifficultyLevel(DifficultyLevel level)
        {
            levels.Remove(level);
        }
        //clears the list of difficulties
        public static void Clear()
        {
            levels = new List<DifficultyLevel>();
        }
    }
}
