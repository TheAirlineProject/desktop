using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.GeneralModel.CountryModel;

namespace TheAirline.Model.GeneralModel.HolidaysModel
{
    //the class for an event (holiday) in a year
    [Serializable]
    public class HolidayYearEvent : ISerializable
    {
        #region Constructors and Destructors

        public HolidayYearEvent(DateTime date, Holiday holiday, int length)
        {
            Date = date;
            Holiday = holiday;
            Length = length;
        }

        private HolidayYearEvent(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("date")]
        public DateTime Date { get; set; }

        [Versioning("holiday")]
        public Holiday Holiday { get; set; }

        [Versioning("length")]
        public int Length { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion

        //in days
    }

    //the class for the current holiday year
    public class HolidayYear
    {
        #region Static Fields

        private static readonly List<HolidayYearEvent> holidays = new List<HolidayYearEvent>();

        #endregion

        #region Public Methods and Operators

        public static void AddHoliday(HolidayYearEvent holiday)
        {
            holidays.Add(holiday);
        }

        public static void Clear()
        {
            holidays.Clear();
        }

        public static HolidayYearEvent GetHoliday(Country country, DateTime date)
        {
            var currentDate = new DateTime(date.Year, date.Month, date.Day, 0, 0, 0);

            return
                holidays.Find(
                    h => h.Date <= currentDate && h.Date.AddDays(h.Length) > currentDate && h.Holiday.Country == country);
        }

        //returns all holidays
        public static List<HolidayYearEvent> GetHolidays()
        {
            return holidays;
        }

        //returns all holidays
        public static List<HolidayYearEvent> GetHolidays(Predicate<HolidayYearEvent> match)
        {
            return holidays.FindAll(match);
        }

        //returns all holidays for a specific day
        public static List<HolidayYearEvent> GetHolidays(DateTime date)
        {
            var currentDate = new DateTime(date.Year, date.Month, date.Day, 0, 0, 0);

            return holidays.FindAll(h => h.Date <= currentDate && h.Date.AddDays(h.Length) > currentDate);
        }

        //returns all holidays for a country
        public static List<HolidayYearEvent> GetHolidays(Country country)
        {
            return holidays.FindAll(h => h.Holiday.Country == country);
        }

        //returns if there is a for a given date and country
        public static Boolean IsHoliday(Country country, DateTime date)
        {
            return GetHoliday(country, date) != null;
        }

        #endregion

        //adds a holiday to the year

        //returns a holiday for a given date and country
    }
}