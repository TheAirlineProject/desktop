
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.HolidaysModel
{
    //the class for a holiday / vacation
    [Serializable]
    public class Holiday : ISerializable
    {
        public static string Section { get; set; }
        public enum TravelType { Travel, Normal, Both }
        [Versioning("travel")]
        public TravelType Travel { get; set; }
        public enum HolidayType {Fixed_Date, Fixed_Week,Fixed_Month, Non_Fixed_Date}
        [Versioning("type")]
        public HolidayType Type { get; set; }
        [Versioning("week")]
        public int Week { get; set; }
        [Versioning("longname")]
        public string LongName { get; set; }
        [Versioning("date")]
        public DateTime Date { get; set; }
        [Versioning("country")]
        public Country Country { get; set; }
        [Versioning("day")]
        public DayOfWeek Day { get; set; }
        [Versioning("month")]
        public int Month { get; set; }
        [Versioning("uid")]
        public string Uid { get; set; }
        public Holiday(string section, string uid, HolidayType type, string name, TravelType travel, Country country)
        {
            this.Type = type;
            this.LongName = name;
            this.Travel = travel;
            this.Country = country;
            this.Uid = uid;
            Holiday.Section = section;
        }
        public virtual string Name
        {
            get { return Translator.GetInstance().GetString(Holiday.Section, this.Uid); }
        }
             private Holiday(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of holidays / vacations
    public class Holidays
    {
        private static List<Holiday> holidays = new List<Holiday>();
        //adds a holiday to the list
        public static void AddHoliday(Holiday holiday)
        {
            holidays.Add(holiday);
        }
        //returns all holidays
        public static List<Holiday> GetHolidays()
        {
            return holidays;
        }
        //clears the list of holidays
        public static void Clear()
        {
            holidays.Clear();
        }
    }
}
