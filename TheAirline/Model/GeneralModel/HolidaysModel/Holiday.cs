using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.GeneralModel.CountryModel;

namespace TheAirline.Model.GeneralModel.HolidaysModel
{
    //the class for a holiday / vacation
    [Serializable]
    public class Holiday : ISerializable
    {
        #region Constructors and Destructors

        public Holiday(string section, string uid, HolidayType type, string name, TravelType travel, Country country)
        {
            Type = type;
            LongName = name;
            Travel = travel;
            Country = country;
            Uid = uid;
            Section = section;
        }

        private Holiday(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Enums

        public enum HolidayType
        {
            FixedDate,

            FixedWeek,

            FixedMonth,

            NonFixedDate
        }

        public enum TravelType
        {
            Travel,

            Normal,

            Both
        }

        #endregion

        #region Public Properties

        public static string Section { get; set; }

        [Versioning("country")]
        public Country Country { get; set; }

        [Versioning("date")]
        public DateTime Date { get; set; }

        [Versioning("day")]
        public DayOfWeek Day { get; set; }

        [Versioning("longname")]
        public string LongName { get; set; }

        [Versioning("month")]
        public int Month { get; set; }

        public virtual string Name
        {
            get { return Translator.GetInstance().GetString(Section, Uid); }
        }

        [Versioning("travel")]
        public TravelType Travel { get; set; }

        [Versioning("type")]
        public HolidayType Type { get; set; }

        [Versioning("uid")]
        public string Uid { get; set; }

        [Versioning("week")]
        public int Week { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the list of holidays / vacations
    public class Holidays
    {
        #region Static Fields

        private static readonly List<Holiday> holidays = new List<Holiday>();

        #endregion

        #region Public Methods and Operators

        public static void AddHoliday(Holiday holiday)
        {
            holidays.Add(holiday);
        }

        //returns all holidays

        //clears the list of holidays
        public static void Clear()
        {
            holidays.Clear();
        }

        public static List<Holiday> GetHolidays()
        {
            return holidays;
        }

        #endregion

        //adds a holiday to the list
    }
}