using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace TheAirline.Model.GeneralModel.StatisticsModel
{
    //the class for general statistics
    [Serializable]
    public class GeneralStatistics : ISerializable
    {
        #region Constructors and Destructors

        public GeneralStatistics()
        {
            StatValues = new List<StatisticsValue>();
        }

        private GeneralStatistics(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("values")]
        public List<StatisticsValue> StatValues { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void AddStatisticsValue(int year, StatisticsType type, double value)
        {
            StatisticsValue item = StatValues.Find(s => s.Year == year && s.Stat.Shortname == type.Shortname);

            if (item == null)
            {
                StatValues.Add(new StatisticsValue(year, type, value));
            }
            else
            {
                item.Value += value;
            }
        }

        public void Clear()
        {
            lock (StatValues)
            {
                StatValues.Clear();
            }
        }

        //returns the value for a statistics type for a year
        public double GetStatisticsValue(int year, StatisticsType type)
        {
            var stats = new List<StatisticsValue>(StatValues);

            StatisticsValue item =
                stats.FirstOrDefault(s => s.Stat != null && s.Year == year && s.Stat.Shortname == type.Shortname);

            if (item == null)
            {
                return 0;
            }
            return item.Value;
        }

        //returns the total value for a statistics type
        public double GetStatisticsValue(StatisticsType type)
        {
            if (StatValues != null
                && StatValues.Exists(s => s.Stat != null && s.Stat.Shortname == type.Shortname))
            {
                return StatValues.Where(s => s.Stat != null && s.Stat.Shortname == type.Shortname)
                                 .Sum(s => s.Value);
            }
            return 0;
        }

        //adds the value for a statistics type for a year

        //returns all years with statistics
        public List<int> GetYears()
        {
            return StatValues.Select(s => s.Year).Distinct().ToList();
        }

        public void SetStatisticsValue(int year, StatisticsType type, double value)
        {
            StatisticsValue item = StatValues.Find(s => s.Year == year && s.Stat.Shortname == type.Shortname);

            if (item == null)
            {
                StatValues.Add(new StatisticsValue(year, type, value));
            }
            else
            {
                item.Value = value;
            }
        }

        #endregion

        //clears the statistics
    }
}