using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace TheAirline.Model.GeneralModel
{
    //the class for operating data
    [Serializable]
    public class OperatingData : ISerializable
    {
        [Versioning("values")]
        public List<OperatingValue> Values { get; set; }
       
        public OperatingData()
        {
            this.Values = new List<OperatingValue>();

        }

          private OperatingData(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }
          public void GetObjectData(SerializationInfo info, StreamingContext context)
          {
              info.AddValue("version", 1);

              Type myType = this.GetType();

              IEnumerable<FieldInfo> fields =
                  myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

              IList<PropertyInfo> props =
                  new List<PropertyInfo>(
                      myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

              IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

              foreach (MemberInfo member in propsAndFields)
              {
                  object propValue;

                  if (member is FieldInfo)
                  {
                      propValue = ((FieldInfo)member).GetValue(this);
                  }
                  else
                  {
                      propValue = ((PropertyInfo)member).GetValue(this, null);
                  }

                  var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                  info.AddValue(att.Name, propValue);
              }
          }
          //returns all the types in the data
          public List<string> getTypes()
          {
              return this.Values.Select(v => v.Type).Distinct().ToList();
          }
          //returns the list of values ordered by date
          public List<OperatingValue> getOrderedValues(string type)
          {
              return this.Values.Where(v=>v.Type == type).OrderByDescending(v => v.Year).ThenByDescending(v => v.Month).ToList();
          }
          //adds a value to the data
          public void addOperatingValue(OperatingValue value)
          {
              if (this.Values.Exists(v => v.Month == value.Month && value.Year == value.Year && v.Type == value.Type))
                  this.Values.First(v => v.Month == value.Month && value.Year == value.Year && v.Type == value.Type).Value += value.Value;
              else
                  this.Values.Add(new OperatingValue(value.Type, value.Year,value.Month, value.Value));
          }
    }
    //the class for an operating value
    [Serializable]
    public class OperatingValue : ISerializable
    {
        [Versioning("type")]
          public string Type { get; set; }
        [Versioning("month")]
        public int Month { get; set; }
        [Versioning("Year")]
        public int Year { get; set; }
        [Versioning("value")]
        public double Value { get; set; }
        public OperatingValue(string type, int year,int month, double value)
        {
            this.Type = type;
            this.Year = year;
            this.Month = month;
            this.Value = value;
        }
           private OperatingValue(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }
          public void GetObjectData(SerializationInfo info, StreamingContext context)
          {
              info.AddValue("version", 1);

              Type myType = this.GetType();

              IEnumerable<FieldInfo> fields =
                  myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

              IList<PropertyInfo> props =
                  new List<PropertyInfo>(
                      myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

              IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

              foreach (MemberInfo member in propsAndFields)
              {
                  object propValue;

                  if (member is FieldInfo)
                  {
                      propValue = ((FieldInfo)member).GetValue(this);
                  }
                  else
                  {
                      propValue = ((PropertyInfo)member).GetValue(this, null);
                  }

                  var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                  info.AddValue(att.Name, propValue);
              }
          }
    }
}
