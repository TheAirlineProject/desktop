 //locked for verison 0.3.6t2 (this serves no purpose whatsoever)

namespace TheAirline.Model.GeneralModel
{
    using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.GeneralModel.ScenarioModel;

    [Serializable]
    //the class for the game object
    public class GameObject : INotifyPropertyChanged, ISerializable
    {
        #region Constants

        public const int StartYear = 1946;

        #endregion

        #region Static Fields

        private static GameObject GameInstance;

        #endregion

        #region Fields

        [Versioning("gametime")]
        private DateTime _gameTime;

        [Versioning("humanmoney")]
        private double _humanMoney;

        #endregion

        #region Constructors and Destructors

        private GameObject()
        {
            //this.PassengerDemandFactor = 100;
            this.GameTime = new DateTime(2007, 12, 31, 10, 0, 0);
            this.TimeZone =
                TimeZones.GetTimeZones()
                    .Find(delegate(GameTimeZone gtz) { return gtz.UTCOffset == new TimeSpan(0, 0, 0); });
            this.Difficulty = DifficultyLevels.GetDifficultyLevel("Easy");
            this.NewsBox = new NewsBox();
            this.PagePerformanceCounterEnabled = false;
            this.FinancePageEnabled = false;
            this.DayRoundEnabled = true;
            this.Contracts = new ObservableCollection<SpecialContractType>();
            this.IsLoaded = false;
        }

        private GameObject(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
            if (version == 1)
                this.Contracts = new ObservableCollection<SpecialContractType>();
        }

        #endregion

        #region Public Events

        [field: NonSerialized]
        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region Public Properties
        public Boolean IsLoaded { get; set; }
        [Versioning("currencycountry")]
        public Country CurrencyCountry { get; set; }

        [Versioning("dayroundenabled")]
        public Boolean DayRoundEnabled { get; set; }

        [Versioning("difficulty")]
        public DifficultyLevel Difficulty { get; set; }

        public Boolean FinancePageEnabled { get; set; }
        /*
        public double FuelPrice 
        {
            get
            {
                return this._fuelprice;
            }
            set
            {
                this._fuelprice = value;
                this.NotifyPropertyChanged("FuelPrice");
            }
        }
        */
        public DateTime GameTime
        {
            get
            {
                return this._gameTime;
            }
            set
            {
                this._gameTime = value;
                this.NotifyPropertyChanged("GameTime");
            }
        }
        [Versioning("contracts",Version=2)]
        public ObservableCollection<SpecialContractType> Contracts { get; set; }

        //public DateTime GameTime { get; set; }

        [Versioning("humanairline")]
        public Airline HumanAirline { get; private set; }

        public double HumanMoney
        {
            get
            {
                return this._humanMoney;
            }
            set
            {
                this._humanMoney = value;
                this.NotifyPropertyChanged("HumanMoney");
            }
        }

        [Versioning("mainairline")]
        public Airline MainAirline { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("newsbox")]
        public NewsBox NewsBox { get; set; }

        public Boolean PagePerformanceCounterEnabled { get; set; }

        [Versioning("scenario")]
        public ScenarioObject Scenario { get; set; }

        [Versioning("startdate")]
        public DateTime StartDate { get; set; }

        public long StartMoney
        {
            get
            {
                return this.getStartMoney();
            }
            set
            {
                ;
            }
        }

        [Versioning("timezone")]
        public GameTimeZone TimeZone { get; set; }

        [Versioning("fuelprice")]
        public double FuelPrice { get; set; }

        #endregion

        //returns the game instance

        #region Public Methods and Operators

        public static GameObject GetInstance()
        {
            if (GameInstance == null)
            {
                GameInstance = new GameObject();
            }
            return GameInstance;
        }

        //sets the instance to an instance

        //restarts the instance
        public static void RestartInstance()
        {
            GameInstance = new GameObject();
        }

        public static void SetInstance(GameObject instance)
        {
            GameInstance = instance;
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void addHumanMoney(double value)
        {
            this.HumanMoney += value;
            this.HumanAirline.Money += value;
        }

        public void setHumanAirline(Airline airline)
        {
            this.HumanAirline = airline;
            this.HumanMoney = airline.Money;
        }

        #endregion

        #region Methods

        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = this.PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private long getStartMoney()
        {
            double baseStartMoney = 7500000;

            baseStartMoney *= this.Difficulty.MoneyLevel;

            return Convert.ToInt64(GeneralHelpers.GetInflationPrice(baseStartMoney));
        }

        #endregion
    }
}