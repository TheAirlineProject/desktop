using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace TheAirline.Model.GeneralModel.InvoicesModel
{
    //the class for a collection of invoices
    [Serializable]
    public class Invoices : ISerializable
    {
        #region Constructors and Destructors

        public Invoices()
        {
            MonthlyInvoices = new List<MonthlyInvoice>();
        }

        private Invoices(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("invoices")]
        public List<MonthlyInvoice> MonthlyInvoices { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public static List<double> GetInvoiceList()
        {
            var invoices = new List<double>();
            foreach (MonthlyInvoice invoice in GameObject.GetInstance().HumanAirline.GetInvoices().MonthlyInvoices)
            {
                invoices.Add(invoice.Amount);
            }

            return invoices;
        }

        //adds an invoice to the invoices
        public void AddInvoice(Invoice invoice)
        {
            AddInvoice(invoice.Type, invoice.Date.Year, invoice.Date.Month, invoice.Date.Day, invoice.Amount);
        }

        public void AddInvoice(Invoice.InvoiceType type, int year, int month, int day, double amount)
        {
            lock (MonthlyInvoices)
            {
                if (Contains(type, year, month, day))
                {
                    MonthlyInvoice mInvoice =
                        MonthlyInvoices.Find(m => m.Month == month && m.Year == year && m.Type == type && m.Day == day);
                    mInvoice.Amount += amount;
                }
                else
                {
                    var mInvoice = new MonthlyInvoice(type, year, month, day, amount);
                    MonthlyInvoices.Add(mInvoice);
                }
            }
        }

        public Boolean Contains(Invoice.InvoiceType type, int year, int month)
        {
            Boolean contains;
            lock (MonthlyInvoices)
            {
                contains = MonthlyInvoices.Exists(m => m.Month == month && m.Year == year && m.Type == type);
            }

            return contains;
        }

        public Boolean Contains(Invoice.InvoiceType type, int year, int month, int day)
        {
            Boolean contains;
            lock (MonthlyInvoices)
            {
                contains = MonthlyInvoices.Exists(m => m.Month == month && m.Year == year && m.Day == day && m.Type == type);
            }

            return contains;
        }

        //returns the yearly amount for a given type and year

        //returns the total amount for a given type
        public double GetAmount(Invoice.InvoiceType type)
        {
            return MonthlyInvoices.FindAll(i => i.Type == type).Sum(i => i.Amount);
        }

        //returns the total amount for a given year, month and type
        public double GetAmount(Invoice.InvoiceType type, int year, int month)
        {
            if (Contains(type, year, month))
            {
                MonthlyInvoice mInvoice =
                    MonthlyInvoices.Find(m => m.Month == month && m.Year == year && m.Type == type);
                return mInvoice.Amount;
            }
            return 0;
        }

        //returns the total amount for a given year and month
        public double GetAmount(int year, int month)
        {
            return MonthlyInvoices.FindAll(m => m.Month == month && m.Year == year).Sum(m => m.Amount);
        }

        //returns the total amount of invoices
        public double GetAmount()
        {
            return MonthlyInvoices.Sum(m => m.Amount);
        }

        public double GetYearlyAmount(Invoice.InvoiceType type, int year)
        {
            return MonthlyInvoices.FindAll(i => i.Type == type && i.Year == year).Sum(i => i.Amount);
        }

        //return the yearly amount for an year
        public double GetYearlyAmount(int year)
        {
            return MonthlyInvoices.FindAll(i => i.Year == year).Sum(i => i.Amount);
        }

        #endregion

        //returns if the invoices contains a month, year and type element
    }
}