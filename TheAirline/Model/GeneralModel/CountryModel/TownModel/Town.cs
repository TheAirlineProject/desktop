namespace TheAirline.Model.GeneralModel.CountryModel.TownModel
{
    using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.GUIModel.HelpersModel;
using TheAirline.Model.AirportModel;

    //the class for a town / city
    [Serializable]
    public class Town : ISerializable
    {
        #region Constructors and Destructors

        public Town(string name, Country country)
            : this(name, country, null)
        {
        }

        public Town(string name, Country country, State state)
        {
            this.Name = name;
            this.Country = country;
            this.State = state;
            this.OriginalName = name;
        }

        private Town(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
                this.OriginalName = this.Name;
        }

        #endregion

        #region Public Properties

        [Versioning("country")]
        public Country Country { get; set; }
       
        public Country CurrentCountry 
        {
            get { return new CountryCurrentCountryConverter().Convert(this.Country) as Country; }
            private set { ; } 
        }
        [Versioning("originalname",Version=2)]
        public string OriginalName { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("state")]
        public State State { get; set; }

        #endregion

        #region Public Methods and Operators

        public static bool operator ==(Town a, Town b)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(a, b))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (((object)a == null) || ((object)b == null))
            {
                return false;
            }
            
            // Return true if the fields match:
            return ((a.Name == b.Name) || (a.Name == b.OriginalName) || (a.OriginalName == b.Name) || (a.OriginalName == b.OriginalName))
                   && ((a.State == null && b.State == null) || (a.State == b.State));
        }

        public static bool operator !=(Town a, Town b)
        {
            return !(a == b);
        }

        public override bool Equals(object u)
        {
            // If parameter is null return false:
            if (u == null || !(u is Town))
            {
                return false;
            }

            // Return true if the fields match:
            return (this == (Town)u);
        }

        public override int GetHashCode()
        {
            return this.Name.GetHashCode() ^ this.Country.GetHashCode();
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the class which finds a town based on name
    public class Towns
    {
        //returns all towns

        //returns a town

        #region Public Methods and Operators

        public static Town GetTown(string name)
        {
            if (name.Contains(','))
            {
                string town = name.Split(',')[0].Trim();
                string state = name.Split(',')[1].Trim();
                           
                if (
                    Airports.GetAirport(
                        a =>
                            (a.Profile.Town.Name == town || a.Profile.Town.OriginalName == town) && a.Profile.Town.State != null
                            && a.Profile.Town.State.ShortName == state) == null)
                {
                    if (Airports.GetAirport(a => a.Profile.Town.Name == town && a.Profile.Country.Uid == state) != null)
                    {
                        return Airports.GetAirport(a => a.Profile.Town.Name == town && a.Profile.Country.Uid == state).Profile.Town;
                    }
                    return null;
                }

                return
                    Airports.GetAirport(
                        a =>
                            a.Profile.Town.Name == town && a.Profile.Town.State != null
                            && a.Profile.Town.State.ShortName == state).Profile.Town;
            }
            if (Airports.GetAirport(a => a.Profile.Town.Name == name) == null)
            {
                return null;
            }

            return Airports.GetAirport(a => a.Profile.Town.Name == name).Profile.Town;
        }

        public static Town GetTown(string name, State state)
        {
            return Airports.GetAirport(a => a.Profile.Town.Name == name && a.Profile.Town.State == state).Profile.Town;
        }

        public static List<Town> GetTowns()
        {
            return Airports.GetAllAirports().Select(a => a.Profile.Town).Distinct().ToList();
        }

        //returns all towns from a specific country
        public static List<Town> GetTowns(Country country)
        {
            return
                Airports.GetAllAirports()
                    .Where(a => a.Profile.Country == country)
                    .Select(a => a.Profile.Town)
                    .Distinct()
                    .ToList();
        }

        #endregion
    }
}