namespace TheAirline.Model.GeneralModel.CountryModel.TownModel
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.Serialization;

    //the class for a state
    [Serializable]
    public class State : ISerializable
    {
        private string flag;

        #region Constructors and Destructors

        public State(Country country, string name, string shortname, Boolean overseas)
        {
            this.Country = country;
            this.Name = name;
            this.ShortName = shortname;
            this.IsOverseas = overseas;
        }

        private State(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("country")]
        public Country Country { get; set; }

        [Versioning("flag")]
        public string Flag
        {
            get
            {
                if (!File.Exists(this.flag))
                {
                    Flag = AppSettings.getDataPath() + "\\graphics\\flags\\" + this.Name + ".png";
                }
                return this.flag;
            }
            set
            {
                this.flag = value;
            }
        }

        [Versioning("isoverseas")]
        public Boolean IsOverseas { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("shortname")]
        public string ShortName { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the list of states
    public class States
    {
        #region Static Fields

        private static readonly List<State> states = new List<State>();

        #endregion

        //adds a state to the list

        #region Public Methods and Operators

        public static void AddState(State state)
        {
            states.Add(state);
        }

        //clears the list of states
        public static void Clear()
        {
            states.Clear();
        }

        //returns a state with a short name and from a country
        public static State GetState(Country country, string shortname)
        {
            return states.Find(s => s.Country == country && s.ShortName == shortname);
        }
        //returns the list of states from a country
        public static List<State> GetStates(Country country)
        {
            return states.FindAll(s => s.Country == country);
        }
        #endregion
    }
}