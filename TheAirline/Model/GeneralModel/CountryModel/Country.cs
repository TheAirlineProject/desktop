using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TheAirline.Model.AirlinerModel;
using System.IO;
using TheAirline.Model.GeneralModel.CountryModel;
using System.Runtime.Serialization;
using TheAirline.GUIModel.HelpersModel;
using System.Reflection;


namespace TheAirline.Model.GeneralModel
{
    //the class for a country
   [Serializable]
    public class Country : BaseUnit
    {
        public static string Section { get; set; }
        [Versioning("region")]
        public Region Region { get; set; }
        //the format used for the tail number
        [Versioning("tailnumberformat")]
        public string TailNumberFormat { get; set; }
        [Versioning("tailnumbers")]
        public CountryTailNumber TailNumbers { get; set; }
        [Versioning("currencies")]
        public List<CountryCurrency> Currencies { get; set; }
        public Boolean HasLocalCurrency { get { return this.Currencies.Count > 0; } private set { ;} }
        public Country(string section, string uid, string shortName, Region region, string tailNumberFormat) : base(uid,shortName)
        {
            Country.Section = section;
            this.Region = region;
            this.TailNumberFormat = tailNumberFormat;
            this.TailNumbers = new CountryTailNumber(this);
            this.Currencies = new List<CountryCurrency>();
        }
        //adds a currency to the country
        public void addCurrency(CountryCurrency currency)
        {
            this.Currencies.Add(currency);
        }
        //returns the current currency
        public CountryCurrency getCurrency(DateTime date)
        {
            if (this.Currencies.Exists(c => c.DateFrom <= date && c.DateTo > date))
                return this.Currencies.Find(c => c.DateFrom <= date && c.DateTo > date);

            return null;
        }
        public override string Name
        {
            get
            {
                return Translator.GetInstance().GetString(Country.Section, this.Uid); ;
            }
        }
           protected Country(SerializationInfo info, StreamingContext ctxt) : base(info,ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

            base.GetObjectData(info, context);

        }
    }
    [Serializable]
    //the class for a country which is a territory of another country
    public class TerritoryCountry : Country
    {
        [Versioning("maincountry")]
        public Country MainCountry { get; set; }
        public TerritoryCountry(string section, string uid, string shortName, Region region, string tailNumberFormat, Country mainCountry)
            : base(section,uid,shortName,region,tailNumberFormat)
        {
            this.MainCountry = mainCountry;
        }
             private TerritoryCountry(SerializationInfo info, StreamingContext ctxt) : base(info,ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

            base.GetObjectData(info, context);
        }
        
    }
    //the collection of countries
    public class Countries
    {
        private static Dictionary<string, Country> countries = new Dictionary<string, Country>();
        
        //clears the list
        public static void Clear()
        {
            countries = new Dictionary<string, Country>();
        }

        //adds a country to the list
        public static void AddCountry(Country country)
        {
            countries.Add(country.Uid, country);
        }

        //retuns a country
        public static Country GetCountry(string uid)
        {
            if (countries.ContainsKey(uid))
                return countries[uid];
            else
                if (TemporaryCountries.GetCountry(uid) != null)
                    return TemporaryCountries.GetCountry(uid);
                else
                return null;
        }

        //returns a country with a specific tailnumberformat
        public static Country GetCountryFromTailNumber(string tailnumber)
        {
            return GetCountries().Find(co => co.TailNumbers.isMatch(tailnumber));


        }

        //returns the list of countries
        public static List<Country> GetCountries()
        {
            List<Country> netto = countries.Values.ToList();
            //netto.AddRange(TemporaryCountries.GetCountries());
            netto.Remove(GetCountry("100"));

            List<Country> tCountries = new List<Country>();
            foreach (Country country in netto)
                if (!(country is TerritoryCountry))
                    tCountries.Add((Country)new CountryCurrentCountryConverter().Convert(country));

            foreach (Country country in TemporaryCountries.GetCountries())
            {
                if (((TemporaryCountry)country).Type == TemporaryCountry.TemporaryType.ManyToOne)
                    tCountries.Add((Country)new CountryCurrentCountryConverter().Convert(country));
            }

            return tCountries.Distinct().ToList();
        }

        //returns the list of countries
        public static List<Country> GetAllCountries()
        {
            List<Country> tCountries = countries.Values.ToList();
            tCountries.AddRange(TemporaryCountries.GetCountries());
            return tCountries;
        }

        //returns the list of countries from a region
        public static List<Country> GetCountries(Region region)
        {
            return GetCountries().FindAll((delegate(Country country) { return country.Region == region; }));
        }
        //returns the number of countries
        public static int Count()
        {
            return countries.Values.Count - 1;//removes 100 (All)
        }
    }
}

