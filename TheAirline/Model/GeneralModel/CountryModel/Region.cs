using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace TheAirline.Model.GeneralModel.CountryModel
{
    /*! Region.
 * This is used for a region in the world.
 * The class needs parameter for the region name
 */

    [Serializable]
    public class Region : ISerializable
    {
        #region Constructors and Destructors

        public Region(string section, string uid, double fuelindex)
        {
            Section = section;
            Uid = uid;
            FuelIndex = fuelindex;
        }

        private Region(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }

            if (version == 1)
                FuelIndex = 1;
        }

        #endregion

        #region Public Properties

        public static string Section { get; set; }

        public string Name
        {
            get { return Translator.GetInstance().GetString(Section, Uid); }
        }

        [Versioning("uid")]
        public string Uid { get; set; }

        [Versioning("fuelindex", Version = 2)]
        public double FuelIndex { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        #endregion
    }

    //the list of regions
    public class Regions
    {
        #region Static Fields

        private static List<Region> regions = new List<Region>();

        #endregion

        #region Public Methods and Operators

        public static void AddRegion(Region region)
        {
            regions.Add(region);
        }

        public static void Clear()
        {
            regions = new List<Region>();
        }

        public static List<Region> GetAllRegions()
        {
            return regions;
        }

        //returns a region from list
        public static Region GetRegion(string uid)
        {
            return regions.Find(r => r.Uid == uid);
        }

        //returns the list of regions, without "All Regions"
        public static List<Region> GetRegions()
        {
            var netto = new List<Region>(regions);
            netto.Remove(GetRegion("100"));
            return netto;
        }

        #endregion

        //clears the list

        //adds a region to the list

        //returns the list of regions
    }
}