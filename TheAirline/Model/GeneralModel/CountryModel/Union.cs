
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;


namespace TheAirline.Model.GeneralModel.CountryModel
{
    //the class for an union or organizational
    [Serializable]
    public class Union : BaseUnit
    {
        public static string Section { get; set; }
        [Versioning("members")]
        public List<UnionMember> Members { get; set; }
        [Versioning("creation")]
        public DateTime CreationDate { get; set; }
        [Versioning("obsolete")]
        public DateTime ObsoleteDate { get; set; }
        public Union(string section, string uid,string shortname, DateTime creationDate, DateTime obsoleteDate) : base(uid,shortname)
        {
            Union.Section = section;
            this.CreationDate = creationDate;
            this.ObsoleteDate = obsoleteDate;

            this.Members = new List<UnionMember>();
        }
        //returns all members at a given date
        public List<UnionMember> getMembers(DateTime date)
        {
            return this.Members.FindAll(m => m.MemberFromDate < date && m.MemberToDate > date);
        }
        //returns if a union has a country as member
        public Boolean isMember(Country country, DateTime date)
        {
            return this.Members.Find(m => m.Country == country && m.MemberFromDate < date && m.MemberToDate > date) != null;
        }
        //adds a member to the union
        public void addMember(UnionMember member)
        {
            this.Members.Add(member);
        }
        public override string Name
        {
            get
            {
                return Translator.GetInstance().GetString(Union.Section, this.Uid);;
            }
        }
             private Union(SerializationInfo info, StreamingContext ctxt) : base(info,ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }


            base.GetObjectData(info, context);
        }
    }
    //the list of unions
    public class Unions
    {
        private static List<Union> unions = new List<Union>();
        //adds an union to the list
        public static void AddUnion(Union union)
        {
            unions.Add(union);
        }
        //returns the list of unions
        public static List<Union> GetUnions()
        {
            return unions;
        }
        //return all unions for a country
        public static List<Union> GetUnions(Country country, DateTime date)
        {
            return unions.FindAll(u => u.Members.Find(um=>um.Country == country)!=null && u.CreationDate < date && u.ObsoleteDate > date);
        }
        //returns an union
        public static Union GetUnion(string uid)
        {
            return unions.Find(u => u.Uid == uid);
        }
        //clears the list of unions
        public static void Clear()
        {
            unions.Clear();
        }
    }
   

}
