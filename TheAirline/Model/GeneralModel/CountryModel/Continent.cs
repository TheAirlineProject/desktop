using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace TheAirline.Model.GeneralModel.CountryModel
{
    //the class for a continent
    [Serializable]
    public class Continent : ISerializable
    {
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("uid")]
        public string Uid{ get; set; }
        [Versioning("regions")]
        public List<Region> Regions { get; set; }
        public Continent(string uid, string name)
        {
            this.Uid = uid;
            this.Name = name;
            this.Regions = new List<Region>();
        }
        //adds a region to the continent
        public void addRegion(Region region)
        {
            this.Regions.Add(region);
        }
        //returns if a country contains a region
        public Boolean hasRegion(Region region)
        {
            return this.Regions.Contains(region);
        }
             private Continent(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of continents
    public class Continents
    {
        private static List<Continent> continents = new List<Continent>();
        //adds a continent to the list
        public static void AddContinent(Continent continent)
        {
            continents.Add(continent);
        }
        //returns the continent for a region
        public static Continent GetContinent(Region region)
        {
            return continents.Where(c => c.Regions.Exists(r=>r.Uid == region.Uid)).First();
        }
        //returns the list of continents
        public static List<Continent> GetContinents()
        {
            return continents;
        }
        //clears the list of continents
        public static void Clear()
        {
            continents.Clear();
        }
        
    }
}
