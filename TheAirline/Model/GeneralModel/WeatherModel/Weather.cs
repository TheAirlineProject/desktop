
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.WeatherModel
{
    [Serializable]
    //the class for the weather for a specific date
    public class Weather : ISerializable
    {
        public const int Sunset = 20;
        public const int Sunrise = 6;
        //public enum eWindSpeed { Calm = 0,Light_Air=4, Light_Breeze = 8,Gentle_Breeze=12, Moderate_Breeze = 15,Fresh_Breeze=27,Strong_Breeze=45,Near_Gale=52, Gale = 60, Strong_Gale=72, Storm = 90,Violent_Storm=102, Hurricane=114  }
        public enum eWindSpeed { Calm, Light_Air, Light_Breeze, Gentle_Breeze, Moderate_Breeze, Fresh_Breeze, Strong_Breeze, Near_Gale, Gale, Strong_Gale, Storm, Violent_Storm, Hurricane }
        [Versioning("windspeed")]
        public eWindSpeed WindSpeed { get; set; }
        public enum WindDirection { E, NE, N, NW, W, SW, S, SE }
        [Versioning("direction")]
        public WindDirection Direction { get; set; }
        public enum Precipitation { None, Fog, Isolated_rain, Light_rain, Heavy_rain, Thunderstorms, Isolated_thunderstorms, Isolated_snow, Light_snow, Heavy_snow, Mixed_rain_and_snow, Sleet, Freezing_rain }
        [Versioning("precip")]
        public Precipitation Precip { get; set; }
        public enum CloudCover {Clear, Partly_Cloudy, Mostly_Cloudy, Overcast}
        [Versioning("cover")]
        public CloudCover Cover { get; set; }
        [Versioning("date")]
        public DateTime Date { get; set; }  
        public enum Season { All_Year, Winter, Summer }
        [Versioning("temperatures")]
        public HourlyWeather[] Temperatures { get; set; }
        [Versioning("high")]
        public double TemperatureHigh { get; set; }
        [Versioning("low")]
        public double TemperatureLow { get; set; }
        public Weather(DateTime date, eWindSpeed windspeed, WindDirection direction, CloudCover cover,Precipitation precip, HourlyWeather[] temperatures,double temperatureLow, double temperatureHigh)
        {
            this.Date = date;
            this.WindSpeed = windspeed;
            this.Direction = direction;
            this.Cover = cover;
            this.Precip = precip;
            this.Temperatures = temperatures;
            this.TemperatureLow = temperatureLow;
            this.TemperatureHigh = temperatureHigh;
        }
             private Weather(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }


        }
    }
    
}
