using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.PilotModel
{
    //the class for the rating for a pilot
    [Serializable]
    public class PilotRating : ISerializable, IComparable<PilotRating>
    {
        #region Constructors and Destructors

        public PilotRating(string name, int trainingdays, int costindex)
        {
            Name = name;
            TrainingDays = trainingdays;
            CostIndex = costindex;
            Aircrafts = new List<TrainingAircraftType>();
        }

        //adds a training aircraft which the rating (pilot) uses in training

        private PilotRating(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo) prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo) prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning) p.GetCustomAttribute(typeof (Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning) notSet.GetCustomAttribute(typeof (Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo) notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
        }

        #endregion

        #region Public Properties

        [Versioning("trainingaircrafts")]
        public List<TrainingAircraftType> Aircrafts { get; set; }

        [Versioning("costindex")]
        public int CostIndex { get; set; }

        [Versioning("name")]
        public string Name { get; set; }

        [Versioning("trainingdays")]
        public int TrainingDays { get; set; }

        #endregion

        #region Public Methods and Operators

        public int CompareTo(PilotRating other)
        {
            return CostIndex.CompareTo(other.CostIndex);
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                      .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                          .Where(p => p.GetCustomAttribute(typeof (Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo) member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo) member).GetValue(this, null);
                }

                var att = (Versioning) member.GetCustomAttribute(typeof (Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        public void AddAircraft(TrainingAircraftType aircraft)
        {
            Aircrafts.Add(aircraft);
        }

        #endregion
    }

    //the list of pilot ratings
    public class PilotRatings
    {
        #region Static Fields

        private static List<PilotRating> _ratings = new List<PilotRating>();

        #endregion

        #region Public Methods and Operators

        public static void AddRating(PilotRating rating)
        {
            _ratings.Add(rating);
        }

        public static void Clear()
        {
            _ratings = new List<PilotRating>();
        }

        //returns the rating with a name
        public static PilotRating GetRating(string name)
        {
            return _ratings.FirstOrDefault(r => r.Name == name);
        }

        //returns the list of ratings 
        public static List<PilotRating> GetRatings()
        {
            return _ratings;
        }

        #endregion

        //adds a rating to the list

        //clears the pilot ratings
    }
}