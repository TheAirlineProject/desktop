
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.PilotModel
{
    //the class for a flight school instructor
    [Serializable]
    public class Instructor : ISerializable
    {
        [Versioning("profile")]
        public PilotProfile Profile { get; set; }
        [Versioning("rating")]
        public Pilot.PilotRating Rating { get; set; }
        [Versioning("students")]
        public List<PilotStudent> Students { get; set; }
        [Versioning("flightschool")]
        public FlightSchool FlightSchool { get; set; }
        public Instructor(PilotProfile profile, Pilot.PilotRating rating)
        {
            this.Profile = profile;
            this.Rating = rating;
            this.Students = new List<PilotStudent>();
        }
        //adds a student to the instructor
        public void addStudent(PilotStudent student)
        {
            this.Students.Add(student);
        }
        //removes a students from the instructor
        public void removeStudent(PilotStudent student)
        {
            this.Students.Remove(student);
     
        }
           private Instructor(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }
    }
    //the list of flight school instructors
    public class Instructors
    {
        private static List<Instructor> instructors = new List<Instructor>();
        //adds an instructor to the list
        public static void AddInstructor(Instructor instructor)
        {
            instructors.Add(instructor);
        }
        //returns all instructors
        public static List<Instructor> GetInstructors()
        {
            return instructors;
        }
        //returns all instructors not assigned to a flight school
        public static List<Instructor> GetUnassignedInstructors()
        {
            return instructors.FindAll(i => i.FlightSchool == null);
        }
        //clears the list of instructors
        public static void Clear()
        {
            instructors.Clear();
        }
        //removes an instructor from the list
        public static void RemoveInstructor(Instructor instructor)
        {
            instructors.Remove(instructor);
        }
        //counts the number of unassigned instructors
        public static int GetNumberOfUnassignedInstructors()
        {
            return instructors.FindAll(i => i.FlightSchool == null).Count;
        }
    }
}
