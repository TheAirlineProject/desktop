using TheAirline.Model.GeneralModel.Helpers;

namespace TheAirline.Model.PilotModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.Serialization;

    using TheAirline.Model.GeneralModel;

    //the class for a flight school instructor
    [Serializable]
    public class Instructor : ISerializable
    {
        #region Constructors and Destructors

        public Instructor(PilotProfile profile, PilotRating rating)
        {
            this.Profile = profile;
            this.Rating = rating;
            this.Students = new List<PilotStudent>();
        }

        private Instructor(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IEnumerable<FieldInfo> fields =
                this.GetType()
                    .GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    this.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop =
                    propsAndFields.FirstOrDefault(
                        p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);

                if (prop != null)
                {
                    if (prop is FieldInfo)
                    {
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    }
                    else
                    {
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                    }
                }
            }

            IEnumerable<MemberInfo> notSetProps =
                propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                var ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                    {
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                    else
                    {
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);
                    }
                }
            }
            if (version == 1)
            {
                this.Rating = GeneralHelpers.GetPilotRating();
            }
        }

        #endregion

        #region Public Properties

        [Versioning("flightschool")]
        public FlightSchool FlightSchool { get; set; }

        [Versioning("profile")]
        public PilotProfile Profile { get; set; }

        [Versioning("rating")]
        public PilotRating Rating { get; set; }

        [Versioning("students")]
        public List<PilotStudent> Students { get; set; }

        #endregion

        #region Public Methods and Operators

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 2);

            Type myType = this.GetType();

            IEnumerable<FieldInfo> fields =
                myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                    .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props =
                new List<PropertyInfo>(
                    myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                        .Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            IEnumerable<MemberInfo> propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                {
                    propValue = ((FieldInfo)member).GetValue(this);
                }
                else
                {
                    propValue = ((PropertyInfo)member).GetValue(this, null);
                }

                var att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }
        }

        //adds a student to the instructor
        public void addStudent(PilotStudent student)
        {
            this.Students.Add(student);
        }

        //removes a students from the instructor
        public void removeStudent(PilotStudent student)
        {
            this.Students.Remove(student);
        }

        #endregion
    }

    //the list of flight school instructors
    public class Instructors
    {
        #region Static Fields

        private static readonly List<Instructor> instructors = new List<Instructor>();

        #endregion

        //adds an instructor to the list

        #region Public Methods and Operators

        public static void AddInstructor(Instructor instructor)
        {
            instructors.Add(instructor);
        }

        public static void Clear()
        {
            instructors.Clear();
        }

        //returns all instructors
        public static List<Instructor> GetInstructors()
        {
            return instructors;
        }

        public static int GetNumberOfUnassignedInstructors()
        {
            return instructors.FindAll(i => i.FlightSchool == null).Count;
        }

        //returns all instructors not assigned to a flight school
        public static List<Instructor> GetUnassignedInstructors()
        {
            return instructors.FindAll(i => i.FlightSchool == null);
        }

        //clears the list of instructors

        //removes an instructor from the list
        public static void RemoveInstructor(Instructor instructor)
        {
            instructors.Remove(instructor);
        }

        #endregion

        //counts the number of unassigned instructors
    }
}